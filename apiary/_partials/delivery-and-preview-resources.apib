## Errors

:[Common errors](errors-common.md)

## HTTP details

Learn more in the [developer center](https://www.contentful.com/developers/docs/references/http-details/).

# Group Spaces

All content in Contentful belongs to a space. You can think of spaces like databases, you will generally have at least one space for a project, but may opt to use a separate space for e.g. testing.

## Space [/spaces/{space_id}?access_token={access_token}]

Each space has a name, a set of locales, and some system metadata.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)

+ Model (application/vnd.contentful.delivery.v1+json)

        {
          "sys": {
            "type": "Space",
            "id": "cfexampleapi"
          },
          "name": "Contentful Example API",
          "locales": [
            {
              "code": "en-US",
              "default": true,
              "name": "English"
            },
            {
              "code": "tlh",
              "default": false,
              "name": "Klingon"
            }
          ]
        }

### Get a space [GET]

+ Response 200

    [Space][]

# Group Content types

:[What is a content type?](content-types-description.md)

## Content type collection [/spaces/{space_id}/content_types?access_token={access_token}]

+ Parameters
    + space_id: cfexampleapi (required, string) - ID of the space in form of a string
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)

### Get all content types of a space [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

    + Attributes (Empty Array)

## Content type [/spaces/{space_id}/content_types/{content_type_id}?access_token={access_token}]

+ Parameters
    + space_id: cfexampleapi (required, string) - ID of the space in form of a string
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + content_type_id: cat (required, string) - ID of the content type in form of a string

### Get a single content type [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

    + Attributes (Content Type)

# Group Entries

Entries are the documents contained within a space. They might represent blog posts or events or anything else that you have defined a [Content Type](#content-types) for.

## Entries collection [/spaces/{space_id}/entries?access_token={access_token}]

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)

### Get all entries of a Space [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

    + Attributes (Empty Array)

## Entry [/spaces/{space_id}/entries/{entry_id}?access_token={access_token}]

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + entry_id (required, string, `nyancat`) ... Alphanumeric `id` of the entry to retrieve

### Get a single entry [GET]

  + Response 200 (application/vnd.contentful.delivery.v1+json)

      + Attributes (Entry)

# Group Assets

Assets represent files in a space. An asset can be any kind of file: an image, a video, an audio file, a PDF or any other filetype. Assets are usually attached to entries through links.

Assets can optionally be localized by providing separate files for each locale. Those assets which are not localized simply provide a single file under the default locale.

When querying the Content Delivery API for entries which contain links to assets then all assets will be included by default.

Asset properties:

Field                           |Type          |Description
--------------------------------|--------------|------------------------------------------------
sys                             |Sys           |Common system properties.
fields.title                    |Text          |Title of the asset.
fields.description              |Text          |Description of the asset.
fields.file                     |File          |File(s) of the asset.
fields.file.fileName            |Symbol        |Original filename of the file.
fields.file.contentType         |Symbol        |Content type of the file.
fields.file.url                 |Symbol        |URL of the file.
fields.file.details             |Object        |Details of the file, depending on its MIME type.
fields.file.details.size        |Number        |Size (in bytes) of the file.

For image assets, the `fields.file.url` field will point to `images.contentful.com`. For other file types, it will point to `assets.contentful.com`.

For the images in `images.contentful.com` you can use query parameters to define the image size, cropping parameters and various other options.

This means you don't need to create multiple versions of that image and store them as assets. You can just store the raw, larger size image, and then use query parameters to define the different sizes when you need them.

All of this, with examples, is documented in our [Images API](https://www.contentful.com/developers/docs/references/images-api/) reference.

## Assets collection [/spaces/{space_id}/assets?access_token={access_token}]

+ Parameters
    + space_id: cfexampleapi (required, string) - ID of the space in form of a string
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)

+ Model (application/vnd.contentful.delivery.v1+json)

        {
          "sys": {
            "type": "Asset",
            "id": "nyancat",
            "space": {"sys": {"type": "Link", "linkType": "Space", "id": "example"}},
            "createdAt": "2013-03-26T00:13:37.123Z",
            "updatedAt": "2013-03-26T00:13:37.123Z",
            "revision": 1
          },
          "fields": {
             "title": "Nyan cat",
             "description": "A typical picture of Nyancat including the famous rainbow trail.",
             "file": {
                "fileName": "nyancat.png",
                "contentType": "image/png",
                "details": {
                   "image": {
                      "width": 250,
                      "height": 250
                    },
                    "size": 12273
                 },
                "url": "//images.contentful.com/cfexampleapi/4gp6taAwW4CmSgumq2ekUm/9da0cd1936871b8d72343e895a00d611/Nyan_cat_250px_frame.png"
               }
            }
        }

### Get all assets of a space [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

    + Attributes (Empty Array)

## Asset [/spaces/{space_id}/assets/{asset_id}?access_token={access_token}]

+ Parameters
    + space_id: cfexampleapi (required, string) - ID of the space in form of a string
    + asset_id: nyancat (required, string) - ID of the asset in form of a string
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)

### Get a single asset [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

    + Attributes (Asset)

# Group Links

Links are a powerful way to model relationships between pieces of content.

Learn more in the [developer center](https://www.contentful.com/developers/docs/concepts/links/).

## Retrieval of linked items [/spaces/{space_id}/entries?access_token={access_token}&include={include}]

When you have related content (e.g. entries with links to image assets) it's possible to include both search results and related data in a single request. To do so, the `include` parameter should be used, specifying the number of levels to be resolved.

The maximum number of inclusions is `10`. The default number, if the parameter is not specified, is `1`. If you want no inclusions at all, you should set it to `0`.

This feature is only available on the Content Delivery API and the Preview API.

If linked entries have not already been retrieved in the standard `items` array, they will be placed in the `includes.Entry` array. Similarly, linked assets are put inside the `includes.Asset` array.

Note that only links between entries, spaces and assets are resolved. Links between spaces and content types are not included in the response when the `include` parameter is specified.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + include (required, number, `2`) ... Number of levels to include (defaults to 1)

### Query entries [GET]

Example: Include 2 levels of linked entries.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Omission of linked items [/spaces/{space_id}/entries?access_token={access_token}&include=0]

Even when not specified, the `include` parameter assumes the value of `1`. In that way, whenever it's desirable to omit linked items, `include` should be specified as `0`.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)

### Query entries [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Links to a specific item [/spaces/{space_id}/entries?access_token={access_token}&include={value}&content_type={content_type}&fields.{linking_field}.sys.id={target_entry_id}]

It might be useful to retrieve all items linked to a particular target entry. To do so, a query URL should filter entries based on their specific `content_type`, `linking_field` (field used to link  items) and `entry_id` from the target entry.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + value (required, number, `2`) ... Number of levels to include.
    + linking_field (required, string, `bestFriend`) ... Field used to link items
    + target_entry_id (required,string, `nyancat`) ... ID of the target entry
    + content_type (required,string, `cat`) ... ID of the content type

### Query entries [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

# Group Search parameters

Each collection endpoint supports a variety of query parameters to search and filter the items that will be included in the response. While the API calls in this section are focused on entries, the same query parameter syntax can be used to filter assets and content types as well.

## Content type [/spaces/{space_id}/entries?access_token={access_token}&content_type={content_type}]

Search for entries with a specific content type by setting the content_type URI query parameter to the ID of the content type you want to search for. Please note that only one value for content_type can be specified at a time.

When querying entries and using search filters based on `fields` or ordering by `fields` you must specify this parameter.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + content_type (required, string, `cat`) ... Alphanumeric `id` of the content type to retrieve.

### Query entries [GET]

Let's find all entries of content type "cat".

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Equality operator [/spaces/{space_id}/entries?access_token={access_token}&{attribute}={value}]

Search for exact matches by using the equality operator.

A reason to query an entry by ID instead of retrieving the Entry itself might be because you want to include resolved links.

Note that equality & inequality operators are not supported for text fields and that search queries for fields have to be constrained by a `content_type` URI query parameter.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + attribute (required, string, `sys.id`) ... The attribute to match.
    + value (required, `nyancat`) ... The value to match.

### Query entries [GET]

Let's find all entries with ID nyancat (hint: IDs are unique and there can only be one).

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Inequality operator [/spaces/{space_id}/entries?access_token={access_token}&{attribute}%5Bne%5D={value}]

Uses the parameter `[ne]` to exclude items matching a certain pattern.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + attribute (required, string, `sys.id`) ... The attribute to match.
    + value (required, `nyancat`) ... The value to match.

### Query entries [GET]

For example, here's how to get all entries except nyancat.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Array equality/inequality [/spaces/{space_id}/entries?access_token={access_token}&content_type={content_type}&fields.{field_id}={value}]

The equality/inequality operators also work with array fields:

- Equality: if one of the items in an array matches the searched term, then the entry is returned.

- Inequality: if one of the fields in an array matches the searched term, then the entry is **not** returned.

Also, as it filters by a field, it becomes necessary to specify a content type.

Note that search queries for fields have to be constrained by a `content_type` URI query parameter.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + content_type (required, string, `cat`) ... Alphanumeric `id` of the content type to retrieve.
    + field_id (required, string, `likes`) ... The attribute to match.
    + value (required, `lasagna`) ... The value to match.

### Query entries [GET]

Let's find all cats who like `lasagna` by matching `fields.likes` (array) against a single value.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Array with multiple values [/spaces/{space_id}/entries?access_token={access_token}&content_type={content_type}&fields.{field_id}%5Ball%5D={values}]

It is possible to use the `[all]` operator to retrieve entries matching a specific set of values (e.g. `fields.likes[all]=rainbows,fish`)

### Query entries [GET]

Let's find all cats who like both `rainbows` and `fish` by using the all operator with `fields.likes` (array) and these two values.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + content_type (required, string, `cat`) ... Alphanumeric `id` of the content type to retrieve.
    + field_id (required, string, `likes`) ... The attribute to match.
    + values (required, `rainbows,fish`) ... The value to match.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Inclusion [/spaces/{space_id}/entries?access_token={access_token}&{attribute}%5Bin%5D={value}]

Filter a field by multiple values via the `[in]` operator.
When applied to an array value there must be at least one matching item. Similarly, when including a field value, it's necessary to specify a Content Type.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + attribute (required, string, `sys.id`) ... The attribute to match.
    + value (required, `finn,jake`) ... The value to match.

### Query entries [GET]

Let's get entries for finn and jake.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Exclusion [/spaces/{space_id}/entries?access_token={access_token}&content_type={content_type}&{attribute}%5Bnin%5D={value}]

Filter a field by multiple values via the `[nin]` operator.
When applied to an array value there must be at least one not matching item. Similarly, when including a field value, it's necessary to specify a content type.

Note that search queries for fields have to be constrained by a `content_type` URI query parameter.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + content_type (required, string, `cat`) ... Alphanumeric `id` of the content type to retrieve.
    + attribute (required, string, `fields.likes`) ... The attribute to match.
    + value (required, `rainbows,lasagna`) ... The value to match.

### Query entries [GET]

Let's get all cats that like neither rainbows nor lasagna.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Existence [/spaces/{space_id}/entries?access_token={access_token}&content_type={content_type}&{attribute}%5Bexists%5D={value}]

You can check for the presence of a field using the `[exists]` operator. It checks if a certain fields is defined (i.e. it has any value).

If the field is not assigned a value, it will not have a JSON payload and will be taken as "non-existent" by the operator.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + content_type (required, string, `cat`) ... Alphanumeric `id` of the content type to retrieve.
    + attribute (required, string, `fields.likes`) ... The path to the property we're checking for existence
    + value (required, boolean, `true`) ... True if the path from attribute should exist

### Query entries [GET]

Let's find all non-archived entries.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Ranges [/spaces/{space_id}/entries?access_token={access_token}&{attribute}%5Blte%5D={value}]

Four range operators are available:

- `[lt]`: Less than
- `[lte]`: Less than or equal to
- `[gt]`: Greater than
- `[gte]`: Greater than or equal to

Those operators can be applied to date and number fields.

Note that search queries for fields have to be constrained by a `content_type` URI query parameter.

When applied to field values, there must be a specified content type in the query.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + attribute (required, string, `sys.updatedAt`) ... The attribute to match.
    + value (required, `2013-01-01T00:00:00Z`) ... The value to match.

### Query entries [GET]

Let's look for entries that've been updated since midnight of January 1st 2013.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Full-text search [/spaces/{space_id}/entries?access_token={access_token}&query={value}]

Full-text search across all text and symbol Fields via query querystring parameter. Please take into account that full-text search is case insensitive and therefore you might get more results than expected. Also note that the query will only take values with more than 1 character.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + value (required, string, `bacon`) ... The value to match.

### Query entries [GET]

Let's find all entries matching "bacon".

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Full-text search on field [/spaces/{space_id}/entries?access_token={access_token}&content_type={content_type}&fields.{field_id}%5Bmatch%5D={value}]

Full-text search on a specific field via the `[match]` operator

After specifying a content type, it is possible to filter results based on a given field. Note that the query will only take values with more than 1 character.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + content_type (required, string, `dog`) ... Alphanumeric `id` of the content type to retrieve.
    + field_id (required, string, `description`) ... Alphanumeric `id` of field to retrieve.
    + value (required, string, `bacon pancakes`) ... The value to match.

### Query entries [GET]

Let's find all things with "bacon pancakes" in their description.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Location proximity search [/spaces/{space_id}/entries?access_token={access_token}&fields.center%5Bnear%5D={coordinate}&content_type={content_type}]

Contentful works great with location-enabled content:

- Let users find places closest to where they currently are
- Show places within a specific map area
- Find places in the vicinity of another place

Entries can have location fields. For example, imagine a content type `city`
with a field called `center` indicating where the city is located.
Once you've added location information to your content you can benefit from
all of the above features simply by using the search in a specific way.

When you are performing geographical searches please keep in mind that queries including exact coordinates are usually no able to take advantage of our caching layer. Depending on your use case it might be enough to round the coords to 3 decimal places (accuracy ~100m) or 2 decimal places (accuracy ~1km) or even further to improve your cache-hit rate.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + content_type (required, string, `1t9IbcfdCk6m04uISSsaIK`) ... Alphanumeric `id` of the content type to retrieve.
    + coordinate (required, string, `38,-122`) ... Latitude and longitude of a location.

### Query entries [GET]

A common use case for location search is to search for places close to the user's current position.


Use the `[near]` operator to show results closest to a specific map location and order the results by distance.

This will return all entries sorted by distance from the point at latitude=38 and a longitude=-122.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Locations in bounding object [/spaces/{space_id}/entries?access_token={access_token}&fields.center%5Bwithin%5D={rectangle}&content_type={content_type}]

When you're displaying content on a map it makes sense to retrieve only content that is visible on the currently visible map rectangle or circle. For these cases, use the `within` operator.

Similar to the "near me" use case, this lets you search for locations that are within the specific object on the map. This can be useful for finding related entries that are in the vicinity of another entry.

There are two mechanisms to search for nearby locations:

1) Using a bounding rectangle:

To search for locations within a rectangle object, use the structure `field.center[within]=latitude1,longitude1,latitude2,longitude2` where:

 + `latitude1` and `longitude1` refer to the the coordinates of the bottom left corner of the rectangle;

 + `latitude2` and `longitude2` refer to the coordinates of the top right corner of the rectangle;

2) Using a bounding circle:

The structure `field.center[within]=latitute,longitude,radius` will return entries included in the circle with `fields.center` of the given latitude, longitude and radius. The unit of the radius parameter is kilometer.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + content_type (required, string, `1t9IbcfdCk6m04uISSsaIK`) ... Alphanumeric `id` of the content type to retrieve.
    + rectangle (required, string, `40,-124,36,-121`) ... Coordinate rectangle to search in.

### Query entries [GET]

This will return entries where `fields.center` is within the rectangle with:

- Bottom left corner: latitude 1, longitude 2
- Top right corner: latitude 3, longitude 4

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Order [/spaces/{space_id}/entries?access_token={access_token}&order={attribute}]

When fetching a collection endpoint, you can order items in the response by specifying the `order` search parameter. Both the `sys` properties (such as `sys.createdAt`) or field values (such as `fields.myCustomDateField`) can be used for ordering.

Note that when ordering entries by fields you must set the `content_type` URI query parameter to the ID of the content type you want to filter by.

Also note that only the following field types can be used with the order parameter:

Name   |JSON Primitive|Description
-------|--------------|----------------------------------------------------
Symbol |String        |Basic list of characters. Maximum length is 256.
Integer|Number        |Number type without decimals. Values from  -2^53 to 2^53.
Number |Number        |Number type with decimals.
Date   |String        |Date/time in ISO-8601 format.
Boolean|Boolean       |Flag, `true` or `false`.

The following field types **do not** support the order parameter:

Name   |JSON Primitive|Description
-------|--------------|-----------------------------------------------------
Text   |String        |Same as symbol, but can be filtered via full-text search. Maximum length is 50,000.
Link   |Object        |See [links](https://www.contentful.com/developers/docs/concepts/links/)
Array  |Array         |List of values. Value type depends on `field.items.type`.
Object |Object        |Arbitrary object.



+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + attribute (required, string, `sys.createdAt`) ... Attribute to order by.

### Query entries [GET]

To get all entries ordered by their creation date.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Reverse order [/spaces/{space_id}/entries?access_token={access_token}&order=-{attribute}]

Reverse the sort order by prefixing the field with a minus sign.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + attribute (required, string, `sys.updatedAt`) ... Attribute to order by.

### Query entries [GET]

For example, order by time of last update starting with the newest entries.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Order with multiple parameters [/spaces/{space_id}/entries?access_token={access_token}&order={attribute},{attribute2}]

Order items by specifying your `order` parameter along with your attributes(`attribute`, `attribute2`). Prefix the field with a minus sign to reverse the sort order of your attribute.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + attribute (required,string,`sys.createdAt`) ... First attribute to order by
    + attribute2 (required, string, `sys.id`) ... Second attribute to order by.

### Query entries [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Limit [/spaces/{space_id}/entries?access_token={access_token}&limit={value}]

Specify the maximum number of results as limit search parameter.

Please note that the maximum number of entries returned by the API is 1000. Limits higher than 1000 will be ignored. The default number of entries returned by the API is 100.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + value (required, number, `3`) ... Limit for number of results.

### Query entries [GET]

Example: Limit to 3 entries.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Skip [/spaces/{space_id}/entries?access_token={access_token}&skip={value}]

Specify an offset as the skip search parameter.

By combining `skip` and `limit` you can achieve pagination:

    Page 1: skip=0, limit=15
    Page 2: skip=15, limit=15
    Page 3: skip=30, limit=15
    etc.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + value (required, number, `3`) ... Offset for results.

### Query entries [GET]

Example: skip 3 entries.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Filtering assets by MIME type [/spaces/{space_id}/assets?access_token={access_token}&mimetype_group={mimetype_group}]

Assets can be filtered by their MIME type group by using the `mimetype_group` query parameter. Valid groups are `attachment`, `plaintext`, `image`, `audio`, `video`, `richtext`, `presentation`,
`spreadsheet`, `pdfdocument`, `archive`, `code` and `markup`. By default, all assets will be returned.

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + mimetype_group (required, string, `image`) ... MIME type group to include.

### Query assets [GET]

Example: Include only image assets.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

# Group Localization

## Retrieve localized entries [/spaces/{space_id}/entries/{entry_id}?access_token={access_token}&locale={locale}]

Specify a requested locale as `locale` URI query parameter.

The locale parameter must be the code of a locale in the space that's being queried, or the special wildcard value `*`. If no locale is specified, the default locale of the space will be used.

When `locale=*` is specified, field values will be nested in an object with keys corresponding to each locale with a defined value. Instead of writing `fields.name` when accessing the response data from your code, you would write `fields.name[localeCode]`.

If the result contains only a single locale, resources will include the property `sys.locale` indicating the locale of that object.

Learn more in the [developer center](https://www.contentful.com/developers/docs/concepts/locales/).

+ Parameters
    + space_id (required, string, `cfexampleapi`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `b4c0n73n7fu1`) ... :[token description](tokentype)
    + entry_id (optional, string, `nyancat`) ... Alphanumeric `id` of the entry to retrieve.
    + locale (required, string, `tlh`) ... The locale to use.

### Query entries [GET]

`fields.name` is the only localized field in the `cat` content type, so all other fields are returned in the default locale.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)
