## Errors

:[Common errors](errors-common.md)

## HTTP details

Learn more about the HTTP details behind our Delivery and Preview APIs in the [developer center](https://www.contentful.com/developers/docs/references/http-details/).

# Group Spaces

All content and assets in Contentful belongs to a space. You will generally have at least one space for a project, but may decide to use separate spaces for testing or staging purposes.

## Space [/spaces/{space_id}?access_token={access_token}]

Each space has a name, a set of locales, and metadata.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)

+ Model (application/vnd.contentful.delivery.v1+json)

        {
          "sys": {
            "type": "Space",
            "id": "71rop70dkqaj"
          },
          "name": "Documentation examples",
          "locales": [
            {
              "code": "en-US",
              "default": true,
              "name": "U.S. English",
              "fallbackCode": null
            }
          ]
        }

### Get a space [GET]

+ Response 200

    [Space][]

# Group Content types

:[What is a content type?](content-types-description.md)

## Content model [/spaces/{space_id}/content_types?access_token={access_token}]

+ Parameters
    + space_id: <space_id> (required, string) - ID of the space in form of a string
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)

### Get the content model of a space [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

    + Attributes (Empty Array)

## Content type [/spaces/{space_id}/content_types/{content_type_id}?access_token={access_token}]

+ Parameters
    + space_id: <space_id> (required, string) - ID of the space in form of a string
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + content_type_id: <product_content_type_id> (required, string) - ID of the content type in form of a string

### Get a single content type [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

    + Attributes (Content Type)

# Group Entries

Entries are the content contained in a space and represent anything that you  defined as a [Content Type](#content-types).

## Entries collection [/spaces/{space_id}/entries?access_token={access_token}]

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)

### Get all entries of a Space [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

    + Attributes (Empty Array)

## Entry [/spaces/{space_id}/entries/{entry_id}?access_token={access_token}]

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + entry_id (required, string, `<entry_id>`) ... Alphanumeric `id` of the entry to retrieve

### Get a single entry [GET]

  + Response 200 (application/vnd.contentful.delivery.v1+json)

      + Attributes (Entry)

# Group Assets

Assets represent binary files in a space. An asset can be any file type including an image, video, audio file, or PDF. Assets are usually attached to entries with links.

You can optionally localize assets by providing separate files for each locale. Assets which are not localized are available as a single file under the default locale.

When querying the Content Delivery API for entries which contain links to assets then all assets are included by default.

Asset properties:

Field                           |Type          |Description
--------------------------------|--------------|------------------------------------------------
sys                             |Sys           |Common system properties.
fields.title                    |Text          |Title of the asset.
fields.description              |Text          |Description of the asset.
fields.file                     |File          |File(s) of the asset.
fields.file.fileName            |Symbol        |Original filename of the file.
fields.file.contentType         |Symbol        |Content type of the file.
fields.file.url                 |Symbol        |URL of the file.
fields.file.details             |Object        |Details of the file, depending on its MIME type.
fields.file.details.size        |Number        |Size (in bytes) of the file.

For image assets, the `fields.file.url` field will point to `images.contentful.com`. For other file types, it will point to `assets.contentful.com`.

With images you can use query parameters to define the image size, cropping parameters and other options to define different sizes when you need them. Find out more in our [Images API](https://www.contentful.com/developers/docs/references/images-api/) reference.

## Assets collection [/spaces/{space_id}/assets?access_token={access_token}]

+ Parameters
    + space_id: <space_id> (required, string) - ID of the space in form of a string
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)

+ Model (application/vnd.contentful.delivery.v1+json)

        {
            "sys": {
                "type": "Array"
            },
            "total": 11,
            "skip": 0,
            "limit": 100,
            "items": [
                {
                    "sys": {
                        "space": {
                            "sys": {
                                "type": "Link",
                                "linkType": "Space",
                                "id": "71rop70dkqaj"
                            }
                        },
                        "id": "1MgbdJNTsMWKI0W68oYqkU",
                        "type": "Asset",
                        "createdAt": "2016-12-20T10:43:41.472Z",
                        "updatedAt": "2016-12-20T10:43:41.472Z",
                        "revision": 1,
                        "locale": "en-US"
                    },
                    "fields": {
                        "title": "Chive logo",
                        "description": "Brand logo",
                        "file": {
                            "url": "//images.contentful.com/71rop70dkqaj/1MgbdJNTsMWKI0W68oYqkU/4c2d960aa37fe571d261ffaf63f53163/9ef190c59f0d375c0dea58b58a4bc1f0.jpeg",
                            "details": {
                                "size": 44089,
                                "image": {
                                    "width": 500,
                                    "height": 500
                                }
                            },
                            "fileName": "9ef190c59f0d375c0dea58b58a4bc1f0.jpeg",
                            "contentType": "image/jpeg"
                        }
                    }
                },
                {
                    "sys": {
                        "space": {
                            "sys": {
                                "type": "Link",
                                "linkType": "Space",
                                "id": "71rop70dkqaj"
                            }
                        },
                        "id": "4zj1ZOfHgQ8oqgaSKm4Qo2",
                        "type": "Asset",
                        "createdAt": "2016-12-20T10:43:41.469Z",
                        "updatedAt": "2016-12-20T10:43:41.469Z",
                        "revision": 1,
                        "locale": "en-US"
                    },
                    "fields": {
                        "title": "Playsam",
                        "description": "Brand logo",
                        "file": {
                            "url": "//images.contentful.com/71rop70dkqaj/4zj1ZOfHgQ8oqgaSKm4Qo2/8c30486ae79d029aa9f0ed5e7c9ac100/playsam.jpg",
                            "details": {
                                "size": 7003,
                                "image": {
                                    "width": 100,
                                    "height": 100
                                }
                            },
                            "fileName": "playsam.jpg",
                            "contentType": "image/jpeg"
                        }
                    }
                },
                {
                    "sys": {
                        "space": {
                            "sys": {
                                "type": "Link",
                                "linkType": "Space",
                                "id": "71rop70dkqaj"
                            }
                        },
                        "id": "3wtvPBbBjiMKqKKga8I2Cu",
                        "type": "Asset",
                        "createdAt": "2016-12-20T10:43:42.502Z",
                        "updatedAt": "2016-12-20T10:43:42.502Z",
                        "revision": 1,
                        "locale": "en-US"
                    },
                    "fields": {
                        "title": "Normann Copenhagen",
                        "description": "Brand logo",
                        "file": {
                            "url": "//images.contentful.com/71rop70dkqaj/3wtvPBbBjiMKqKKga8I2Cu/90b69e82b8b735383d09706bdd2d9dc5/zJYzDlGk.jpeg",
                            "details": {
                                "size": 12302,
                                "image": {
                                    "width": 353,
                                    "height": 353
                                }
                            },
                            "fileName": "zJYzDlGk.jpeg",
                            "contentType": "image/jpeg"
                        }
                    }
                },
                {
                    "sys": {
                        "space": {
                            "sys": {
                                "type": "Link",
                                "linkType": "Space",
                                "id": "71rop70dkqaj"
                            }
                        },
                        "id": "wtrHxeu3zEoEce2MokCSi",
                        "type": "Asset",
                        "createdAt": "2016-12-20T10:43:41.397Z",
                        "updatedAt": "2016-12-20T10:43:41.397Z",
                        "revision": 1,
                        "locale": "en-US"
                    },
                    "fields": {
                        "title": "Playsam Streamliner",
                        "description": "Merchandise photo",
                        "file": {
                            "url": "//images.contentful.com/71rop70dkqaj/wtrHxeu3zEoEce2MokCSi/e86a375b7ad18c25e4ff55de1eac42fe/quwowooybuqbl6ntboz3.jpg",
                            "details": {
                                "size": 27187,
                                "image": {
                                    "width": 600,
                                    "height": 446
                                }
                            },
                            "fileName": "quwowooybuqbl6ntboz3.jpg",
                            "contentType": "image/jpeg"
                        }
                    }
                },
                {
                    "sys": {
                        "space": {
                            "sys": {
                                "type": "Link",
                                "linkType": "Space",
                                "id": "71rop70dkqaj"
                            }
                        },
                        "id": "6t4HKjytPi0mYgs240wkG",
                        "type": "Asset",
                        "createdAt": "2016-12-20T10:43:41.840Z",
                        "updatedAt": "2016-12-20T10:43:41.840Z",
                        "revision": 1,
                        "locale": "en-US"
                    },
                    "fields": {
                        "title": "Toys",
                        "description": "Category icon set",
                        "file": {
                            "url": "//images.contentful.com/71rop70dkqaj/6t4HKjytPi0mYgs240wkG/b7ba3984167c53d728e7533e54ab179d/toys_512pxGREY.png",
                            "details": {
                                "size": 6744,
                                "image": {
                                    "width": 128,
                                    "height": 128
                                }
                            },
                            "fileName": "toys_512pxGREY.png",
                            "contentType": "image/png"
                        }
                    }
                },
                {
                    "sys": {
                        "space": {
                            "sys": {
                                "type": "Link",
                                "linkType": "Space",
                                "id": "71rop70dkqaj"
                            }
                        },
                        "id": "10TkaLheGeQG6qQGqWYqUI",
                        "type": "Asset",
                        "createdAt": "2016-12-20T10:43:41.401Z",
                        "updatedAt": "2016-12-20T10:43:41.401Z",
                        "revision": 1,
                        "locale": "en-US"
                    },
                    "fields": {
                        "title": "Whisk beaters",
                        "description": "Merchandise photo",
                        "file": {
                            "url": "//images.contentful.com/71rop70dkqaj/10TkaLheGeQG6qQGqWYqUI/13c64b63807d1fd1c4b42089d2fafdd6/ryugj83mqwa1asojwtwb.jpg",
                            "details": {
                                "size": 28435,
                                "image": {
                                    "width": 450,
                                    "height": 600
                                }
                            },
                            "fileName": "ryugj83mqwa1asojwtwb.jpg",
                            "contentType": "image/jpeg"
                        }
                    }
                },
                {
                    "sys": {
                        "space": {
                            "sys": {
                                "type": "Link",
                                "linkType": "Space",
                                "id": "71rop70dkqaj"
                            }
                        },
                        "id": "Xc0ny7GWsMEMCeASWO2um",
                        "type": "Asset",
                        "createdAt": "2016-12-20T10:43:42.413Z",
                        "updatedAt": "2016-12-20T10:43:42.413Z",
                        "revision": 1,
                        "locale": "en-US"
                    },
                    "fields": {
                        "title": "Hudson Wall Cup ",
                        "description": "Merchandise image",
                        "file": {
                            "url": "//images.contentful.com/71rop70dkqaj/Xc0ny7GWsMEMCeASWO2um/190cc760e991d27fba6e8914b87a736d/jqvtazcyfwseah9fmysz.jpg",
                            "details": {
                                "size": 48751,
                                "image": {
                                    "width": 600,
                                    "height": 600
                                }
                            },
                            "fileName": "jqvtazcyfwseah9fmysz.jpg",
                            "contentType": "image/jpeg"
                        }
                    }
                },
                {
                    "sys": {
                        "space": {
                            "sys": {
                                "type": "Link",
                                "linkType": "Space",
                                "id": "71rop70dkqaj"
                            }
                        },
                        "id": "2Y8LhXLnYAYqKCGEWG4EKI",
                        "type": "Asset",
                        "createdAt": "2016-12-20T10:43:42.413Z",
                        "updatedAt": "2016-12-20T10:43:42.413Z",
                        "revision": 1,
                        "locale": "en-US"
                    },
                    "fields": {
                        "t%5Btle":%5D"Lemnos",
                        "description": "company logo",
                        "file": {
                            "url": "//images.contentful.com/71rop70dkqaj/2Y8LhXLnYAYqKCGEWG4EKI/44105a3206c591d5a64a3ea7575169e0/lemnos-logo.jpg",
                            "details": {
                                "size": 7149,
                                "image": {
                                    "width": 175,
                                    "height": 32
                                }
                            },
                            "fileName": "lemnos-logo.jpg",
                            "contentType": "image/jpeg"
                        }
                    }
                },
                {
                    "sys": {
                        "space": {
                            "sys": {
                                "type": "Link",
                                "linkType": "Space",
                                "id": "71rop70dkqaj"
                            }
                        },
                        "id": "6m5AJ9vMPKc8OUoQeoCS4o",
                        "type": "Asset",
                        "createdAt": "2016-12-20T10:43:41.493Z",
                        "updatedAt": "2016-12-20T10:43:41.493Z",
                        "revision": 1,
                        "locale": "en-US"
                    },
                    "fields": {
                        "title": "Home and Kitchen",
                        "description": "category icon",
                        "file": {
                            "url": "//images.contentful.com/71rop70dkqaj/6m5AJ9vMPKc8OUoQeoCS4o/07b56832506b9494678d1acc08d01f51/1418244847_Streamline-18-256.png",
                            "details": {
                                "size": 2977,
                                "image": {
                                    "width": 256,
                                    "height": 256
                                }
                            },
                            "fileName": "1418244847_Streamline-18-256.png",
                            "contentType": "image/png"
                        }
                    }
                },
                {
                    "sys": {
                        "space": {
                            "sys": {
                                "type": "Link",
                                "linkType": "Space",
                                "id": "71rop70dkqaj"
                            }
                        },
                        "id": "6s3iG2OVmoUcosmA8ocqsG",
                        "type": "Asset",
                        "createdAt": "2016-12-20T10:43:41.392Z",
                        "updatedAt": "2016-12-20T10:43:41.392Z",
                        "revision": 1,
                        "locale": "en-US"
                    },
                    "fields": {
                        "title": "House icon",
                        "description": "Category icon set",
                        "file": {
                            "url": "//images.contentful.com/71rop70dkqaj/6s3iG2OVmoUcosmA8ocqsG/b55b213eeca80de2ecad2b92aaa0065d/1418244847_Streamline-18-256__1_.png",
                            "details": {
                                "size": 4244,
                                "image": {
                                    "width": 250,
                                    "height": 250
                                }
                            },
                            "fileName": "1418244847_Streamline-18-256 (1).png",
                            "contentType": "image/png"
                        }
                    }
                },
                {
                    "sys": {
                        "space": {
                            "sys": {
                                "type": "Link",
                                "linkType": "Space",
                                "id": "71rop70dkqaj"
                            }
                        },
                        "id": "KTRF62Q4gg60q6WCsWKw8",
                        "type": "Asset",
                        "createdAt": "2016-12-20T10:43:42.396Z",
                        "updatedAt": "2016-12-20T10:43:42.396Z",
                        "revision": 1,
                        "locale": "en-US"
                    },
                    "fields": {
                        "title": "SoSo Wall Clock",
                        "descriptio%5B": "b%5D Lemnos",
                        "file": {
                            "url": "//images.contentful.com/71rop70dkqaj/KTRF62Q4gg60q6WCsWKw8/ae855aa3810a0f6f8fee25c0cabb4e8f/soso.clock.jpg",
                            "details": {
                                "size": 66927,
                                "image": {
                                    "width": 1000,
                                    "height": 1000
                                }
                            },
                            "fileName": "soso.clock.jpg",
                            "contentType": "image/jpeg"
                        }
                    }
                }
            ]
        }

### Get all assets of a space [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

    + Attributes (Empty Array)

## Asset [/spaces/{space_id}/assets/{asset_id}?access_token={access_token}]

+ Parameters
    + space_id: <space_id> (required, string) - ID of the space in form of a string
    + asset_id: <asset_id> (required, string) - ID of the asset in form of a string
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)

### Get a single asset [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

    + Attributes (Asset)

# Group Links

Links are a powerful way to model relationships between content entries and assets. Learn more about links in our [concept guide](/developers/docs/concepts/links/).

## Retrieval of linked items [/spaces/{space_id}/entries?access_token={access_token}&include={include}]

When you have related content (e.g. entries with links to image assets) it's possible to include both search results and related data in a single request. Use the `include` parameter to do this, specifying the number of levels to resolve.

The maximum number of inclusions is `10`. The default number, if the parameter is not specified, is `1`. If you want no inclusions at all, you should set it to `0`.

This feature is only available in the Content Delivery and Preview APIs.

If the standard `items` array has not already retrieved the linked entries, they will be in the `includes.Entry` array. Linked assets are inside the `includes.Asset` array.

**Note**: The `include` parameter only resolves links between entries and assets within a space. Links between content types within a space are not included in the response.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + include (required, number, `2`) ... Number of levels to include (defaults to 1)

### Query entries [GET]

For example, to include 2 levels of linked entries.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Omission of linked items [/spaces/{space_id}/entries?access_token={access_token}&include=0]

Even when not specified, the `include` parameter defaults to the value of `1`. When you want to omit linked items, specify `include` as `0`.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)

### Query entries [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Links to a specific item [/spaces/{space_id}/entries?access_token={access_token}&include={value}&content_type={content_type}&fields.{linking_field}.sys.id={target_entry_id}]

If you need to retrieve all items linked to a target entry the query URL should filter entries on their specific `content_type`, `linking_field` (field to link items) and `entry_id` from the target entry.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + value (required, number, `2`) ... Number of levels to include.
    + linking_field (required, string, `<link_field>`) ... Field used to link items
    + target_entry_id (required,string, `<asset_id>`) ... ID of the target entry
    + content_type (required,string, `<product_content_type_id>`) ... ID of the content type

### Query entries [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

# Group Search parameters

Each collection endpoint supports a variety of query parameters to search and filter the items included in the response. While the API call examples focus on entries, you can use the same query parameter syntax to filter assets and content types as well.

## Content type [/spaces/{space_id}/entries?access_token={access_token}&content_type={content_type}]

Search for entries with a specific content type by setting the `content_type` URI query parameter to the ID of the content type you want to search for.

**Note**: You can only specify one value for `content_type` at a time.

When querying entries and using search filters based on `fields` or ordering by `fields` you must specify this parameter.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + content_type (required, string, `<product_content_type_id>`) ... Alphanumeric `id` of the content type to retrieve.

### Query entries [GET]

This example finds all entries of content type 'Product'.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Select operator [/spaces/{space_id}/entries?access_token={access_token}&content_type={content_type}&select={value}]

The select operator allows you to choose what to return from an entity. You provide a json path and the API will return the property at that path. You can use combine multiple comma separated operators to retrieve different paths of an entity.

For example, if you want to return the `sys.id` and `fields.name` of an Entry:

```bash
/spaces/<space-id>/entries/?select=sys.id,fields.name&content_type=<product_content_type_id>
```

You can fetch the entire `sys` or `fields` object and it's sub-fields by passing it to the `select` operator. For example to omit the `sys` object:

```bash
/spaces/<space-id>/entries/?select=fields&content_type=<product_content_type_id>
```

Select has some restrictions:

- The select operator is only applicable for collections of Entries and Assets, and with an Entry you must provide the `content_type` query parameter.
- The select operator can only select properties to a depth of 2. For example, `select=fields.productName.en-US` is not valid.
- If you want to select a property for a specific locale you need to combine the `select` and `locale` operators, e.g `/assets/?select=fields.productName&locale=en-US`.
- You can select up to 100 properties.
- If you use the select operator on an Entry with linked fields, only the content linked to a field you select will be returned.

If you provide an invalid property path, e.g `sys.doesNotExist`, Contentful returns a `400 Bad request` containing the property path that is invalid.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + content_type (required, string, `<product_content_type_id>`) ... Alphanumeric `id` of the content type to retrieve.
    + value (required, string, `sys.id`) ... The path of the property to select.

### Query entries [GET]

Let's select all the Entry IDs.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Select operator example)

## Equality operator [/spaces/{space_id}/entries?access_token={access_token}&{attribute}={value}]

You can search for exact matches by using the equality operator.

Search for exact matches by using the equality operator. This includes querying an entry by ID value instead of retrieving the Entry directly, which would allow you to include resolved links.

**Note**: Equality and inequality operators are not supported for text fields and you need to constrain search queries for fields with a `content_type` URI query parameter.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + attribute (required, string, `sys.id`) ... The attribute to match.
    + value (required, `<entry_id>`) ... The value to match.

### Query entries [GET]

This example finds all entries with the ID '<entry_id>' (IDs are unique).

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Inequality operator [/spaces/{space_id}/entries?access_token={access_token}&{attribute}%5Bne%5D={value}]

Uses the `[ne]` parameter to exclude items matching a certain pattern.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + attribute (required, string, `sys.id`) ... The attribute to match.
    + value (required, `<entry_id>`) ... The value to match.

### Query entries [GET]

This example returns all entries except those with the ID `<entry_id>`.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Array equality/inequality [/spaces/{space_id}/entries?access_token={access_token}&content_type={content_type}&fields.{field_id}={value}]

The equality/inequality operators also work with array fields:

- **Equality**: If one of the items in an array matches the searched term, then it returns the entry.
- **Inequality**: If one of the fields in an array matches the searched term, then the entry is **not** returned.

**Note**: As the query filters by a field, you need to specify a content type.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + content_type (required, string, `<product_content_type_id>`) ... Alphanumeric `id` of the content type to retrieve.
    + field_id (required, string, `<link_field_multiple>`) ... The attribute to match.
    + value (required, `accessories`) ... The value to match.

### Query entries [GET]

This example finds all products tagged as `accessories` by matching `fields.tags` (an array) against a single value.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Array with multiple values [/spaces/{space_id}/entries?access_token={access_token}&content_type={content_type}&fields.{field_id}%5Ball%5D={values}]

It's possible to use the `[all]` operator to retrieve entries matching a specific set of values (e.g. `fields.likes[all]=flowers,accessories`)

### Query entries [GET]

This example finds all products tagged as `flowers` and `accessories` by using the `all` operator with `fields.tags` (an array) and the two values.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + content_type (required, string, `<product_content_type_id>`) ... Alphanumeric `id` of the content type to retrieve.
    + field_id (required, string, `tags`) ... The attribute to match.
    + values (required, `flowers,accessories`) ... The value to match.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Inclusion [/spaces/{space_id}/entries?access_token={access_token}&{attribute}%5Bin%5D={value}]

You can filter a field by multiple values with the `[in]` operator. When applied to an array value there must be at least one matching item. Similarly, when including a field value, you need to specify a Content Type.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + attribute (required, string, `sys.id`) ... The attribute to match.
    + value (required, `<entry_id>,<entry_id_two>`) ... The value to match.

### Query entries [GET]

This example gets entries that match '<entry_id>' and '<entry_id_two>'.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Exclusion [/spaces/{space_id}/entries?access_token={access_token}&content_type={content_type}&{attribute}%5Bnin%5D={value}]

You can filter a field by multiple values with the `[nin]` operator. When applied to an array value there must be at least one not matching item. Similarly, when including a field value, you need to specify a content type.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + content_type (required, string, `<product_content_type_id>`) ... Alphanumeric `id` of the content type to retrieve.
    + attribute (required, string, `fields.tags`) ... The attribute to match.
    + value (required, `flowers,accessories`) ... The value to match.

### Query entries [GET]

This example get all products tagged as neither 'flowers' nor 'accessories'.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Existence [/spaces/{space_id}/entries?access_token={access_token}&content_type={content_type}&{attribute}%5Bexists%5D={value}]

You can check for the presence of a field using the `[exists]` operator. It checks if a certain field is defined (i.e. it has any value).

If the field is not assigned a value, it will not have a JSON payload and the operator will assume it to be 'non-existent'.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + content_type (required, string, `<product_content_type_id>`) ... Alphanumeric `id` of the content type to retrieve.
    + attribute (required, string, `fields.tags`) ... The path to the property we're checking for existence
    + value (required, boolean, `true`) ... True if the path from attribute should exist

### Query entries [GET]

This example finds all non-archived entries.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Ranges [/spaces/{space_id}/entries?access_token={access_token}&{attribute}%5Blte%5D={value}]

Four range operators are available:

- `[lt]`: Less than
- `[lte]`: Less than or equal to
- `[gt]`: Greater than
- `[gte]`: Greater than or equal to

You can apply these operators to date and number fields.

When applied to field values, you must specify the content type in the query.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + attribute (required, string, `sys.updatedAt`) ... The attribute to match.
    + value (required, `2013-01-01T00:00:00Z`) ... The value to match.

### Query entries [GET]

This example gets entries that have been updated since midnight of January 1st 2013.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Full-text search [/spaces/{space_id}/entries?access_token={access_token}&query={value}]

It's possible to perform a full-text search across all text and symbol fields with the `query` parameter.

**Note**: Full-text search is case insensitive and you might get more results than expected. Also the query will only take values with more than 1 character.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + value (required, string, `design`) ... The value to match.

### Query entries [GET]

This example finds all entries containing the word 'design'.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Full-text search on a field [/spaces/{space_id}/entries?access_token={access_token}&content_type={content_type}&fields.{field_id}%5Bmatch%5D={value}]

After specifying a content type, you can perform a full-text search on a specific field with the `[match]` operator. The query will only take values with more than **1** character.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + content_type (required, string, `<brand_content_type_id>`) ... Alphanumeric `id` of the content type to retrieve.
    + field_id (required, string, `website`) ... Alphanumeric `id` of field to retrieve.
    + value (required, string, `.com`) ... The value to match.

### Query entries [GET]

This example finds all entries with '.com' in the website field.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Location proximity search [/spaces/{space_id}/entries?access_token={access_token}&fields.center%5Bnear%5D={coordinate}&content_type={content_type}]

Using a proximity search on location-enabled content let's you find results in a specified geographical area.

Queries that include exact coordinates wont be able to take full advantage of our caching layer. With many use cases it might be enough to round the coordinates to 3 decimal places (an accuracy of about 300m), 2 decimal places (an accuracy of about 1km) or more to improve your cache hit rates.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + content_type (required, string, `<city_content_type_id>`) ... Alphanumeric `id` of the content type to retrieve.
    + coordinate (required, string, `38,-122`) ... Latitude and longitude of a location.

### Query entries [GET]

A common use case for location search is to search for places close to the user's current position.

Use the `[near]` operator to show results closest to a specific map location and order the results by distance.

This will return all entries sorted by distance from the point at `latitude=38` and `longitude=-122`.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Locations in a bounding object [/spaces/{space_id}/entries?access_token={access_token}&fields.center%5Bwithin%5D={rectangle}&content_type={content_type}]

When you're displaying content on a map it makes sense to retrieve only content that is visible in the current visible map area. For these cases, use the `within` operator.

Similar to the 'near me' use case, this lets you search for locations that are within the specific area on the map. This can be useful for finding related entries that are in the vicinity of another entry.

There are two ways to search for nearby locations.

#### 1. Using a bounding rectangle:

To search for locations within a rectangle area object, use the structure `field.center[within]=latitude1,longitude1,latitude2,longitude2` where:

+ `latitude1` and `longitude1` refer to the coordinates of the bottom left corner of the rectangle
+ `latitude2` and `longitude2` refer to the coordinates of the top right corner of the rectangle.

#### 2. Using a bounding circle:

The structure `field.center[within]=latitute,longitude,radius` will return entries included in the circle with `fields.center` of the given latitude, longitude and radius. The unit of the radius parameter is kilometer.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + content_type (required, string, `<city_content_type_id>`) ... Alphanumeric `id` of the content type to retrieve.
    + rectangle (required, string, `40,-124,36,-121`) ... Coordinate rectangle to search in.

### Query entries [GET]

This example returns entries where `fields.center` is within the rectangle with:

- **Bottom left corner**: latitude 1, longitude 2
- **Top right corner**: latitude 3, longitude 4

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Order [/spaces/{space_id}/entries?access_token={access_token}&order={attribute}]

When fetching a collection endpoint, you can order items in the response by specifying the `order` search parameter. You can use `sys` properties (such as `sys.createdAt`) or field values (such as `fields.myCustomDateField`) for ordering.

**Note**: When ordering entries by fields you must set the `content_type` URI query parameter to the ID of the content type you want to filter by. You can only use the following field types with the `order` parameter:

Name   |JSON Primitive|Description
-------|--------------|----------------------------------------------------
Symbol |String        |Basic list of characters. Maximum length is 256.
Integer|Number        |Number type without decimals. Values from  -2<sup>53</sup> to 2<sup>53</sup>.
Number |Number        |Number type with decimals.
Date   |String        |Date/time in ISO-8601 format.
Boolean|Boolean       |Flag, `true` or `false`.

The following field types **do not** support the order parameter:

Name   |JSON Primitive|Description
-------|--------------|-----------------------------------------------------
Text   |String        |Same as symbol, but can be filtered via full-text search. Maximum length is 50,000.
Link   |Object        |See [links](https://www.contentful.com/developers/docs/concepts/links/)
Array  |Array         |List of values. Value type depends on `field.items.type`.
Object |Object        |Arbitrary object.



+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the Space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + attribute (required, string, `sys.createdAt`) ... Attribute to order by.

### Query entries [GET]

This example gets all entries ordered by their creation date.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Reverse order [/spaces/{space_id}/entries?access_token={access_token}&order=-{attribute}]

This example reverses the sort order by prefixing the field with a minus sign.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + attribute (required, string, `sys.updatedAt`) ... Attribute to order by.

### Query entries [GET]

This example orders results by the time of the last update starting with the newest entries.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Order with multiple parameters [/spaces/{space_id}/entries?access_token={access_token}&order={attribute},{attribute2}]

You can order items by specifying the `order` parameter along with attributes(`attribute`, `attribute2`). Prefix the field with a minus sign to reverse the sort order of the attribute.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + attribute (required,string,`sys.createdAt`) ... First attribute to order by
    + attribute2 (required, string, `sys.id`) ... Second attribute to order by.

### Query entries [GET]

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Limit [/spaces/{space_id}/entries?access_token={access_token}&limit={value}]

You can specify the maximum number of results as a `limit` search parameter.

**Note**: The maximum number of entries returned by the API is **1000** and it will ignore limits higher than **1000**. The default number of entries returned by the API is **100**.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + value (required, number, `3`) ... Limit for number of results.

### Query entries [GET]

This example limits results to 3 entries.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Skip [/spaces/{space_id}/entries?access_token={access_token}&skip={value}]

You can specify an offset with the `skip` search parameter.

By combining `skip` and `limit` you can paginate through results:

    Page 1: skip=0, limit=15
    Page 2: skip=15, limit=15
    Page 3: skip=30, limit=15
    etc.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + value (required, number, `3`) ... Offset for results.

### Query entries [GET]

This example skips 3 entries.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Filtering assets by MIME type [/spaces/{space_id}/assets?access_token={access_token}&mimetype_group={mimetype_group}]

You can filter assets by their MIME type group by using the `mimetype_group` query parameter. Valid groups are `attachment`, `plaintext`, `image`, `audio`, `video`, `richtext`, `presentation`,
`spreadsheet`, `pdfdocument`, `archive`, `code` and `markup`. By default, the API will return all assets.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + mimetype_group (required, string, `image`) ... MIME type group to include.

### Query assets [GET]

This example will return only image assets.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)

## Search on references [/spaces/{space_id}/entries?access_token={access_token}&content_type={content_type}&fields.{reference_field}.sys.contentType.sys.id={reference_content_type}&fields.{reference_field}.fields.{search_field}%5Bmatch%5D={search_value}]
You can search for entries based on the values of referenced entries.

For example, if you want to find the products that are of a particular brand, you can use the search on references functionality to find the products with one API request.

### Structure of a query

Here's how the example above would look as a query:

```sql
content_type=<product_content_type_id>&fields.brand.sys.contentType.sys.id=<brand_content_type_id>&fields.brand.fields.companyName[match]=Lemnos
```

- First is the `content_type` parameter which you must include when you want to filter based on the values of the fields of entries of a certain content type.
- Second is `fields.brand.sys.contentType.sys.id=<brand_content_type_id>` which you use to to filter on fields of entries from content type `<product_content_type_id>`.
- Third is `fields.brand.fields.companyName[match]=Lemnos` which filters entries to those branded as 'Lemnos'.

**Note**: All the filters on referenced entries are scoped with the path to the field that contains the reference. In the previous example that path is `fields.brand`.

You can search on multiple references at once and combine them into one singe API query with a series of field and value pairs.

### Available nested filters
You can use the `all`, `in`, `nin`, `exists`, `match`, `gt`, `gte`,`lt`, `lte`, `ne`, `near` and `within` filters when searching on references.

The semantics of these filters are the same as when you use them on a non referenced entry.

### Restrictions

Searching on references has the following restrictions:

- You can only search on references on fields which link to a single entry. Fields which hold references to many entries or fields with references to assets are not supported.
- The maximum number of reference searches in one query is 2. A larger value will return an error.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + content_type (required, string, `<product_content_type_id>`) ...
    + reference_content_type (required, string, `<brand_content_type_id>`) ... The id of then content type of the referenced entry
    + reference_field (required, string, `brand`) ... The id of the field holding the reference
    + search_field (required, string, `companyName`) ... The id of the field you want to search
    + search_value (required, string, `Lemnos`) ... The value you are looking for


### Search on references [GET]

This example will return the Lemnos branded products.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)


# Group Localization

## Retrieve localized entries [/spaces/{space_id}/entries/{entry_id}?access_token={access_token}&locale={locale}]

You can specify a locale for entries using the `locale` URI query parameter.

The locale parameter must be the code of a locale in the space you're querying, or the wildcard value `*`. If you don't specify a locale, the default locale of the space is used.

If there's no content available for the requested locale the API will try the fallback locale of the requested locale.

For example you have the `de-CH` (Swiss German) locale and configure it to fallback to `de-DE` (German). When you request content for `de-CH` any missing field in that locale will be replace with its fallback value in `de-DE` (if they exist). For more information about locale fallbacks read [the locale section of the CMA docs](/developers/docs/references/content-management-api/#/reference/locales).

When you specify `locale=*`, field values are nested in an object with keys corresponding to each locale with a defined value. Instead of writing `fields.productName` when accessing the response data from your code, use `fields.productName[localeCode]`.

If the result contains only a single locale, resources will include the property `sys.locale` indicating the locale of that object.

Learn more about locales in our [concepts document](/developers/docs/concepts/locales/).

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + access_token (required, string, `<access_token>`) ... :[token description](tokentype)
    + entry_id (optional, string, `<entry_id>`) ... Alphanumeric `id` of the entry to retrieve.
    + locale (required, string, `tlh`) ... The locale to use.

### Query entries [GET]

`fields.productName` is the only localized field in the `product` content type, so returns all other fields in the default locale.

+ Response 200 (application/vnd.contentful.delivery.v1+json)

  + Attributes (Empty Array)
