# Group Editor interface

An editor interface represents the look and feel of content type fields in the UI. They are tightly
coupled to a specific content type and define which widget has to be rendered for the content type's
fields.

__Example__

Let's consider the following content type which describes a typical blog post kind of data structure.
It has a title, a body and a category that can be either "General", "iOS" or "Android".

```
{
  "fields": [
    { "id": "title", "name": "Title", "type": "Symbol" },
    { "id": "body", "name": "Body", "type": "Text" },
    {
      "id": "category", "name": "Category", "type": "Symbol",
      "validations": [{ "in": ["General", "iOS", "Android"] }]
    }
  ]
}
```

An editor interface can for example define that the `title` field should be rendered as a normal
input field (the respective widget's id is `singleLine`). Furthermore it can define that the `body`
should be a normal textarea (= `multipleLine`) and also that the `category` should be rendered as a
dropdown field (= `dropdown`).

The editor interface would look like this:

```
{
  "controls": [
    { "fieldId": "title", "widgetId": "singleLine" },
    { "fieldId": "body", "widgetId": "multipleLine" },
    { "fieldId": "category", "widgetId": "dropdown" }
  ]
}
```

Please note that there are specific sets of applicable widgets per content type field type:

| Widget ID               | Applicable field types        | Description               |
|-------------------------|-------------------------------|---------------------------|
| assetLinkEditor         | Asset                         | Search, attach, and preview an asset. |
| assetLinksEditor        | Asset (array)                 | Search, attach, reorder, and preview multiple assets. |
| assetGalleryEditor      | Asset (array)                 | Search, attach, reorder, and preview multiple assets in a gallery layout |
| boolean                 | Boolean                       | Radio buttons with customizable labels. |
| datePicker              | Date                          | Select date, time, and timezon. |
| entryLinkEditor         | Entry                         | Search and attach another entry.
| entryLinksEditor        | Entry (array)                 | Search and attach multiple entries. |
| entryCardEditor         | Entry                         | Search, attach, and preview another entry. |
| entryCardsEditor        | Entry (array)                 | Search, attach, and preview multiple entries. |
| numberEditor            | Integer, Number               | A simple input for numbers. |
| rating                  | Integer, Number               | Uses stars to select a number. |
| locationEditor          | Location                      | A map to select or find coordinates from an address. |
| objectEditor            | Object                        | A code editor for JSON |
| urlEditor               | Symbol                        | A text input that also shows a preview of the given URL. |
| slugEditor              | Symbol                        | Automatically generates a slug and validates its uniqueness across entries. |
| ooyalaEditor            | Symbol                        | Search and select a video hosted by [Ooyala][] |
| kalturaEditor           | Symbol                        | Search and select a video hosted by [Kaltura][] |
| kalturaMultiVideoEditor | Symbol (array)                | Search and select multiple videos hosted by [Kaltura][] |
| listInput               | Symbol (array)                | Text input that splits values on `,` and stores them as an array. |
| checkbox                | Symbol (array)                | A group of checkboxes. One for each value from the `in` validation on the content type field |
| tagEditor               | Symbol (array)                | A text input to add a string to the list. Shows the items as tags and allows to remove them. |
| multipleLine            | Text                          | A simple `<textarea>` input |
| markdown                | Text                          | A full-fledged [markdown editor][] |
| singleLine              | Text, Symbol                  | A simple text input field |
| dropdown                | Text, Symbol, Integer, Number | A `<input type="select">` element. It uses the values from an `in` validation on the content type field as options. |
| radio                   | Text, Symbol, Integer, Number | A group of radio buttons. One for each value from the `in` validation on the content type field |

[Kaltura]: https://www.contentful.com/ecosystem/kaltura/
[Ooyala]: https://www.contentful.com/ecosystem/ooyala/
[markdown editor]: https://www.contentful.com/r/knowledgebase/markdown/

__Settings__

A control may have custom settings that are passed to the widget to change its behavior or presentation.

The control entry for a field of type `Boolean`, for example, could look like this.
```
{
  "fieldId": "isFeatured",
  "widgetId": "boolean",
  "settings": {
    "helpText": "Should the post be featured on the homepage?",
    "trueLabel": "absolutely",
    "falseLabel": "rather not",
  }
}
```

If present, the `settings` object of a control must be an object. All widgets
accept the `helpText` setting and use it to render additional information with
the widget. Other settings are widget specific.

<table>
<thead>
  <tr>
    <th>Widget ID</th>
    <th>Property Name</th>
    <th>Description</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td rowspan="2">boolean</td>
    <td><code>trueLabel</code></td>
    <td>Shows this text next to the radio button that sets this value to `true`. Defaults to “Yes”.</td>
  </tr>
  <tr>
    <td><code>falseLabel</code></td>
    <td>Shows this text next to the radio button that sets this value to `false`. Defaults to “No”.</td>
  </tr>
  <tr>
    <td>rating</td>
    <td><code>stars</code></td>
    <td>Number of stars to select from. Defaults to 5.</td>
  </tr>
  <tr>
    <td rowspan="2">datePicker</td>
    <td><code>format</code></td>
    <td>One of “dateonly”, “time”, “timeZ” (default). Specifies whether to show the clock and/or timezone inputs.</td>
  </tr>
  <tr>
    <td><code>ampm</code></td>
    <td>Specifies which type of clock to use. Must be one of the stringss “12” or “24” (default).</td>
  </tr>
</tbody>
</table>


## Editor interface [/spaces/{space_id}/content_types/{content_type_id}/editor_interface]

An editor interface is a singleton resource of a content type, meaning that there can only be one editor interface per content type at any point in time. It gets created automatically on the first time publish of a
content type and is updated when a content type field is added, removed or changed. Please note that
cascaded updates are only happening when the content type is published. Since the editor
interface is created on the server side, it is not possible to create an editor interface manually via some
http request.

The server will return a 404 if there is no editor interface for the requested content type.
This typically happens when the content type was not yet published or if it was created before
the automatic editor interface creation (June 20, 2016). (Re-) Publishing the content type
should fix both scenarios.

+ Parameters
    + space_id: fp91oelsziea (required, string) - ID of the space in form of a string
    + content_type_id: hfM9RCJIk0wIm06WkEOQY (required, string) - ID of the content type in form of a string

### Get the editor interface [GET]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Complete Editor Interface)

### Update the editor interface [PUT]

This endpoint can be used to update an existing editor interface.
Note that you always need to specify its last version with `X-Contentful-Version`.

+ Request Update the editor interface
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json

    + Attributes (Editor Interface)

+ Response 201 (application/vnd.contentful.management.v1+json)

    + Attributes (Complete Editor Interface)
