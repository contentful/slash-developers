FORMAT: 1A
HOST: https://images.contentful.com

# Images API

Contentful's Images API allows the retrieval and manipulation of image files referenced from [assets](/#reference/assets).

The JSON for an asset on Contentful looks like this:


```
"fields": {
    "title": "Nyan Cat",
    "file": {
      "fileName": "Nyan_cat_250px_frame.png",
      "contentType": "image/png",
      "details": {
        "image": {
          "width": 250,
          "height": 250
        },
        "size": 12273
      },
      "url": "//images.contentful.com/<space_id>/4gp6taAwW4CmSgumq2ekUm/9da0cd1936871b8d72343e895a00d611/Nyan_cat_250px_frame.png"
    }
  }
```

This documentation covers the parameters you can add to the URL specified in the `file.url` field to manipulate and convert images.

# Group Retrieval

## Image [/{space_id}/{token1}/{token2}/{name}]

Retrieve an unmodified image. This is the same URL from an [asset's](/#reference/assets) `file.url` field, containing the token ids and image name you will require.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + token1 (required, string, `4gp6taAwW4CmSgumq2ekUm`) ... Alphanumeric token identifying the image.
    + token2 (required, string, `9da0cd1936871b8d72343e895a00d611`) ... Alphanumeric token identifying the image.
    + name (required, string, `Nyan_cat_250px_frame.png`) ... The original file name of the image.

### Retrieve an image [GET]

+ Response 200 (image/png)

# Group Changing formats

## Image format [/{space_id}/{token1}/{token2}/{name}?fm={image_format}]

Images can be automatically converted to a different format, `jpg`, `png` or `webp` are supported. If no parameter is specified, you will receive your image in its original format.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + token1 (required, string, `4gp6taAwW4CmSgumq2ekUm`) ... Alphanumeric token identifying the image.
    + token2 (required, string, `9da0cd1936871b8d72343e895a00d611`) ... Alphanumeric token identifying the image.
    + name (required, string, `Nyan_cat_250px_frame.png`) ... The original file name of the image.
    + image_format (required, string, `jpg`) ... The desired image output format.

### Retrieve an image [GET]

+ Response 200 (image/jpg)

## JPEG quality [/{space_id}/{token1}/{token2}/{name}?fm=jpg&q={quality}]

You can define the quality of JPEG images retrieved.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + token1 (required, string, `4gp6taAwW4CmSgumq2ekUm`) ... Alphanumeric token identifying the image.
    + token2 (required, string, `9da0cd1936871b8d72343e895a00d611`) ... Alphanumeric token identifying the image.
    + name (required, string, `Nyan_cat_250px_frame.png`) ... The original file name of the image.
    + quality (required, number, `50`) ... Quality as a percentage, between 0 and 100.

### Retrieve an image [GET]

+ Response 200 (image/jpg)

## Progressive JPEGs [/{space_id}/{token1}/{token2}/{name}?fm=jpg&fl=progressive]

JPEG images can be delivered as *progressive* JPEGs.

The progressive JPEG format stores multiple passes of an image in progressively higher detail. When a progressive image is being loaded, the viewer will first see a lower quality pixelated version which will gradually improve in detail, until the image is fully downloaded. The idea is to display an image as early as possible to make the layout look as designed.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + token1 (required, string, `4gp6taAwW4CmSgumq2ekUm`) ... Alphanumeric token identifying the image.
    + token2 (required, string, `9da0cd1936871b8d72343e895a00d611`) ... Alphanumeric token identifying the image.
    + name (required, string, `Nyan_cat_250px_frame.png`) ... The original file name of the image.

### Retrieve an image [GET]

+ Response 200 (image/jpg)

# Group Resizing & cropping

## Specify width & height [/{space_id}/{token1}/{token2}/{name}?w={width}&h={height}]

Choose a custom width and height for the image.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + token1 (required, string, `4gp6taAwW4CmSgumq2ekUm`) ... Alphanumeric token identifying the image.
    + token2 (required, string, `9da0cd1936871b8d72343e895a00d611`) ... Alphanumeric token identifying the image.
    + name (required, string, `Nyan_cat_250px_frame.png`) ... The original file name of the image.
    + width (required, number, `100`) ... The desired width of the image, the maximum allowed size is 4000.
    + height (required, number, `100`) ... The desired height of the image, the maximum allowed size is 4000.

### Retrieve an image [GET]

+ Response 200 (image/png)

## Modify the resizing behaviour [/{space_id}/{token1}/{token2}/{name}?fit={type}]

By default, images are resized to fit inside the bounding box given by `w` and `h` while retaining their aspect ratio. Using the `fit` parameter, you can change this behaviour.

The possible values are:

- `pad`: Same as the default resizing, but adds padding so that the generated image has exactly the specified dimensions.
- `crop`: Crop a part of the original image to match the specified size.
- `fill`: Crop the image to the specified dimensions, if the original image is smaller than these dimensions, then the image will be upscaled.
- `thumb`: When used in association with the `f` parameter below, creates a thumbnail from the image based on a focus area.
- `scale`: Scale the image regardless of the original aspect ratio.



+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + token1 (required, string, `4gp6taAwW4CmSgumq2ekUm`) ... Alphanumeric token identifying the image.
    + token2 (required, string, `9da0cd1936871b8d72343e895a00d611`) ... Alphanumeric token identifying the image.
    + name (required, string, `Nyan_cat_250px_frame.png`) ... The original file name of the image.
    + type (required, string, `pad`) ... One of the types as described above.

### Retrieve an image [GET]

+ Response 200 (image/png)

## Specify focus area for resizing [/{space_id}/{token1}/{token2}/{name}?f={type}&fit=thumb]

Changes the focus area when using the `fit` type of `thumb` outlined above.

Possible value:

- `top`, `right`, `left`, `bottom`.
- A combination of the above like `bottom_right`.
- `face` or `faces` to focus the resizing via face detection.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + token1 (required, string, `4gp6taAwW4CmSgumq2ekUm`) ... Alphanumeric token identifying the image.
    + token2 (required, string, `9da0cd1936871b8d72343e895a00d611`) ... Alphanumeric token identifying the image.
    + name (required, string, `Nyan_cat_250px_frame.png`) ... The original file name of the image.
    + type (required, string, `face`) ... One of the types described above.

### Retrieve an image [GET]

+ Response 200 (image/png)

## Crop rounded corners & circle/elipsis [/{space_id}/{token1}/{token2}/{name}?r={radius}]

You can add rounded corners to your image or crop to a circle/ellipse.

Possible values:

- A float value `r` defining the corner radius.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + token1 (required, string, `4gp6taAwW4CmSgumq2ekUm`) ... Alphanumeric token identifying the image.
    + token2 (required, string, `9da0cd1936871b8d72343e895a00d611`) ... Alphanumeric token identifying the image.
    + name (required, string, `Nyan_cat_250px_frame.png`) ... The original file name of the image.
    + radius (required, `20`) ... A value as described above.

### Retrieve an image [GET]

+ Response 200 (image/png)

# Group Image manipulation

## Background color [/{space_id}/{token1}/{token2}/{name}?w={width}&h={height}&fit=pad&bg={color}]

The background color when used with the `pad` fit type. It accepts RGB values like `rgb:9090ff` and the default color is transparent.

+ Parameters
    + space_id (required, string, `<space_id>`) ... Alphanumeric `id` of the space to retrieve.
    + token1 (required, string, `4gp6taAwW4CmSgumq2ekUm`) ... Alphanumeric token identifying the image.
    + token2 (required, string, `9da0cd1936871b8d72343e895a00d611`) ... Alphanumeric token identifying the image.
    + name (required, string, `Nyan_cat_250px_frame.png`) ... The original file name of the image.
    + color (required, string `rgb:ffffff`) ... A color constant as described above.
    + width (required, number, `500`) ... The desired width of the image.
    + height (required, number, `250`) ... The desired height of the image.

### Retrieve an image [GET]

+ Response 200 (image/png)
