FORMAT: 1A
HOST: https://api.contentful.com

# Content Management API
The Content Management API is a [REST](https://en.wikipedia.org/wiki/Representational_state_transfer) API for managing content.

In Contentful content is represented as Entries and Assets divided into Spaces. Apps and websites depend on the structure of Entries, so every Entry must comply to a specific Content Type. Assets represent binary files like images, videos and other media.

Entries are represented as JSON data; Assets are represented as (binary) files.

The API can be securely accessed via HTTPS and will only be available to clients authenticating with an access token.

Managing content via an API has many benefits:

- Custom applications can use the API to manage content.
- Scripts can use the API to automate various tasks.
- Contentful's own content management web app is a user-friendly JavaScript application which is solely based on the API.

If you want to deliver content (e.g. to the web or to mobile apps), you should often use the Content Delivery API. Whereas the Content Management API may be used to deliver and manage content within an application, it shouldn't be used to massively deliver content to end users. For example, you shouldn't use the Content Management API to display blog posts on a web site or pull information into a mobile web app unless that app is meant for editing content.

Note that the structure of responses of the Management API differs from those of the Delivery API. GET responses from the Management API retrieve the entirety of items (i.e. includes all localized or even unpublished content).

Conceptual documentation, as well as further resources like tutorials and libraries can be found on [our Developer Center](https://contentful.com/developers/documentation/).

## Authentication

Learn about authenticating to the CMA and obtain your access token at [our Developer Center](http://www.contentful.com/developers/docs/references/authentication/#the-management-api).

## Resource IDs

When creating a resource you may either chose an ID or let the server generate a random ID for you.

When choosing an ID yourself it must adhere to the following rules:

- Length must be between 1 and 64 characters
- May consist of alphanumeric characters, minus `-`, underscore `_` and period `.`

In terms of a regular expression: `/^[a-zA-Z0-9-_.]{1,64}$/`.

## Updating Resources

When updating an existing resource don't only pass the changes you made; Instead pass the entire resource including the changes you've made. In other words: Do not pass a subset of properties and expect some kind of merge to occur. If you update with only a subset of properties all existing properties which are not part of that update will be gone.

To summarize, resources should always be updated like this:

- Fetch current resource
- Make changes to current resource
- Update resource by passing changed resource along with current version number

This way no unseen changes are ever overridden and unexpected conflicts are unlikely to occur.

Be aware that none of the `sys` property fields can be updated, including `sys.id`.

## Updating and Version Locking

Contentful uses optimistic locking. When updating an existing resource its current version needs to be specified as the value of the `X-Contentful-Version` HTTP header (this header is automatically set when using our [official SDKs][sdks]). The version is compared with the resource's current version on the server to ensure that a client doesn't overwrite a resource that has since been updated. If the version changed in between the update will be rejected.

[sdks]: https://www.contentful.com/developers/docs/code/libraries/

## API rate limits

In the Content Management API, there is a limit of 10 requests per second. The limit exists to prevent unlimited usage and ensure the consumption of resources that a single account can exercise is limited.

The rate limit is implemented through a standard mechanism of the HTTP protocol (returning response code 429).


## Errors

:[Common errors](_partials/errors-common.md)

### Management API Error types

HTTP Status Code   |Error Code       |Description
-------------------|-----------------|----------------------------------------------------------------------------------
`409`|`VersionMismatchError`|This error happens when you're trying to update an existing asset, entry or content type, and you either didn't specify the current version of the object or specify an outdated version.
`422`|`ValidationFailedError`|The request payload was a valid JSON, but something was wrong with the data. Check the error details field â€“ it should provide more specific information about the error.
`422`|`InvalidEntryError`|The entered value is invalid.
`422`|`ValidationFailedError`|The triggered query references an invalid field.

## HTTP Details

Learn more [on our Developer Center](https://www.contentful.com/developers/docs/references/http-details/).

## API Versioning

All API requests should specify a `Content-Type` header of `application/vnd.contentful.management.v1+json`.

Otherwise, we will automatically route your request to the latest version of the API.
This could break clients which expect the outdated API version.
To be on the safe side, always specify the `Content-Type` header.

# Group Spaces

## Spaces Collection [/spaces]

Spaces are containers for Content Types, Entries and Assets and other resources. API consumers, like mobile apps or websites, typically fetch data by getting Entries and Assets from one or more Spaces.

In Contentful you can be a member of multiple Organizations.

Depending on your role in the organization you can create Spaces in them or not: Only organization owners and admins have this permission.

When you sign up the first time, you'll create a new organization. When you're invited to an existing organization, you'll become a member of it.

If you only have a single organization, any Space you create will be automatically associated with that organization.

However, if you're an admin or an owner in multiple organizations you need to pass the ID of the organization you want to create the Space in.

### Create a Space [POST]

The `X-Contentful-Organization` header is optional if an account only belongs to one organization.

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json
            X-Contentful-Organization: 1PLOOEmTI2S1NYald2TemO

    + Attributes
        - name: Example Space - Name of the Space
        - defaultLocale: en-US - Default locale of the Space

+ Response 201 (application/vnd.contentful.management.v1+json)

    + Attributes (Space)

### Get all spaces an account has access to [GET]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Empty Array)

## Space [/spaces/{space_id}]

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string

### Update a Space [PUT]

The `X-Contentful-Organization` header is optional if an account only belongs to one organization.

+ Request Update existing
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json
            X-Contentful-Version: 1

    + Attributes
        - name: Hyper Space - Name of the Space

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Space)

### Get a Space [GET]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Space)

### Delete a Space [DELETE]

Delete an existing Space by doing a DELETE request to `/spaces/ID`. Note that deleting a Space will remove its entire content, including all Content Types, Entries and Assets. Be careful as this action can not be undone.

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 204 (application/vnd.contentful.management.v1+json)

# Group Content Types

:[What is a Content Type?](_partials/content-types-description.md)

## Content Type Collection [/spaces/{space_id}/content_types]

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string

### Get all content types of a Space [GET]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Empty Array)

### Create a Content Type [POST]

**Creating content types with `POST` is strongly discouraged!**

When using this endpoint, an ID will be automatically generated for the created Content Type and returned on the response.

In contrast, using the `PUT` method below allows you to control the ID of the created Content Type. This is especially important for Content Type ID's because they are often used as parameters in your own code. It's much nicer to query for  `content_type=newsArticle` than `content_type=hs7Kj10al3b6x`.

Finally, in these responses, you can also specify validations and determine whether a field should be required or localized.

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json

    + Attributes (Content Type Creation)

+ Response 201 (application/vnd.contentful.management.v1+json)

    + Attributes (Content Type)


## Content Type [/spaces/{space_id}/content_types/{content_type_id}]

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string
    + content_type_id: 3ORKIAOaJqQWWg86MWkyOs (required, string) - ID of the Content Type in form of a string

### Create/Update a Content Type [PUT]

This endpoint can be used to create a new Content Type with an ID specified by the user, or to update a specific Content Type via its ID.

Note that when updating an existing Content Type, you always need to specify the last version you got of the Content Type you are updating with `X-Contentful-Version`.

Whenever you are creating or updating a Content Type you can add or remove validations to the fields present in the Content Type schema. Validations, specified in the validations property a field, are included in the payload sent to the server when you create or update a Content Type.

Validation      |Description                              |Applicable to|Example                         |
----------------|-----------------------------------------|-------------|--------------------------------|
`linkContentType`|Takes an array of content type ids and validates that the link points to an entry of that content type.|Links to Entries|`{"linkContentType": ['cate','doc','etc']}`
`in`|Takes an array of values and validates that the field value is in this array.|Text, Symbol, Integer, Number| `{"in": ['foo', 'bar', 'baz']}`
`linkMimetypeGroup`|Takes a MimeType group name and validates that the link points to an asset of this group.|Links to Assets|`{"linkMimetypeGroup": "image"}`
`size`|Takes optional min and max parameters and validates the size of the array (number of objects in it).|Arrays, Text, Symbol|`{"size": { "min": 5, "max": 20}}`
`range`|Takes optional min and max parameters and validates the range of a value.|Number, Integer|-
`regexp`|Takes a string that reflects a JS regex and flags, validates against a string. See [JS Reference](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp) for the parameters.|Text, Symbol|`{"regexp": {"pattern": "^such", "flags": "im"}}`
`present`|Validates that a value is present.|None|-
`linkField`|Validates that the property is a link (must not be a valid link, just that it looks like one).|None|-


Please notice that validations will only take effect after the Content Type has been activated and that previously exising entries will not be validated until they are published again.

To remove a specific validation, update the Content Type leaving that validation out of the field's validations collection. To remove all the validations applied to a field update the Content Type schema removing the validations property.

It is possible to change the ID of a Content Type's field. Please note, that the API will return different data afterwards and that this might break your currently existing code base.

__Usecase__

Imagine you created a Content Type and started developing your application. During the development process you find out, that the initially chosen name of a field was not perfect and you want to change it. Especially you want to change the response of the API.

+ Request Create new Content Type with a predefined identifier
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json

    + Attributes (Content Type Creation)

+ Response 201 (application/vnd.contentful.management.v1+json)

    + Attributes (Content Type)

+ Request Update existing Content Type
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json
            X-Contentful-Version: 14

    + Attributes (Content Type Creation)

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Content Type Update)

+ Request Update existing Content Type with validations
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json
            X-Contentful-Version: 15

    + Attributes (Content Type Validations)

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Content Type Update)

+ Request Update an existing Field's identifier
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json
            X-Contentful-Version: 16

    + Attributes (Content Type Update Field ID)

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Content Type Update)

### Get a single Content Type [GET]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Content Type)

### Delete a Content Type [DELETE]

Before you can delete a Content Type you need to deactivate it.

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 204 (application/vnd.contentful.management.v1+json)

## Content Type Activation [/spaces/{space_id}/content_types/{content_type_id}/published]

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string
    + content_type_id: 3ORKIAOaJqQWWg86MWkyOs (required, string) - ID of the Content Type in form of a string

### Activate a Content Type [PUT]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            X-Contentful-Version: 11

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Content Type Published)

### Deactivate a Content Type [DELETE]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Content Type Unpublished)

## Activated Content Type Collection [/spaces/{space_id}/public/content_types]

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string

### Get all activated content types of a Space [GET]

Retrieves the activated versions of Content Types, ignoring any changes made since the last activation.

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Empty Array)


:[Group Editing Interfaces](_partials/cma/editing-interface.apib)

# Group Entries

## Entries Collection [/spaces/{space_id}/entries]

Entries represent textual content in a Space. An Entry's data adheres to a certain Content Type.

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string

### Get all entries of a Space [GET]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Empty Array)

### Create an Entry [POST]

Before you can create an Entry you need to create and activate a Content Type.

When creating a new Entry you need to pass the ID of the Entry's desired Content Type as the `X-Contentful-Content-Type` header.

When using this endpoint, an ID will be automatically generated for the created Entry and returned on the response.

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json
            X-Contentful-Content-Type: hfM9RCJIk0wIm06WkEOQY

    + Attributes (Entry Update)

+ Response 201 (application/vnd.contentful.management.v1+json)

    + Attributes (Entry)

## Entry [/spaces/{space_id}/entries/{entry_id}]

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string
    + entry_id: helloworld (required, string) - ID of the Entry in form of a string

### Create/Update an Entry  [PUT]

This endpoint can be used to create a new Entry with an ID specified by the user, or to update a specific Entry via its ID.

Note that when updating an existing Entry, you always need to specify the last version you got of the Entry you are updating with `X-Contentful-Version`.

Before you can create an Entry you need to create and activate a Content Type.

When creating a new Entry you need to pass the ID of the Entry's desired Content Type as the `X-Contentful-Content-Type` header.

For updating an Entry, passing the ID of the Entry's Content Type is not required.

+ Request Create new Entry with a predefined identifier
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json
            X-Contentful-Content-Type: hfM9RCJIk0wIm06WkEOQY

    + Attributes (Entry Update)

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Entry)

+ Request Update existing Entry
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json
            X-Contentful-Content-Type: hfM9RCJIk0wIm06WkEOQY
            X-Contentful-Version: 4

    + Attributes (Entry Update)

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Entry)

### Get a single entry [GET]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Entry)

### Delete an entry [DELETE]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            X-Contentful-Version: 4

+ Response 204 (application/vnd.contentful.management.v1+json)

## Entry Publishing [/spaces/{space_id}/entries/{entry_id}/published]

After publishing the Entry it will be available via the Content Delivery API.

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string
    + entry_id: helloworld (required, string) - ID of the Entry in form of a string

### Publish an Entry [PUT]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            X-Contentful-Version: 6

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Entry Published)

### Unpublish an Entry [DELETE]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            X-Contentful-Version: 7

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Entry Update)

## Entry Archiving [/spaces/{space_id}/entries/{entry_id}/archived]

An Entry can only be archived when it's not published.

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string
    + entry_id: helloworld (required, string) - ID of the Entry in form of a string

### Archive an Entry [PUT]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            X-Contentful-Version: 8

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Entry Update)

### Unarchive an Entry [DELETE]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            X-Contentful-Version: 9

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Entry Update)

# Group Assets

## Assets Collection [/spaces/{space_id}/assets]

Assets represent files in a Space. An asset can be any kind of file: an image, a video, an audio file, a PDF or any other filetype. Assets are usually attached to Entries through Links.

Assets can optionally be localized by providing separate files for each locale. Those Assets which are not localized simply provide a single file under the default locale.

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string

### Get all Assets of a Space [GET]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Empty Array)

### Create an Asset [POST]

When using this endpoint, an ID will be automatically generated for the created Asset and returned on the response.

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json

    + Attributes (Asset Update)

+ Response 201 (application/vnd.contentful.management.v1+json)

    + Attributes (Asset)


## Published Assets Collection [/spaces/{space_id}/public/assets]

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string

### Get all published Assets of a Space [GET]

Retrieves the published versions of Assets.

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Empty Array)

## Asset [/spaces/{space_id}/assets/{asset_id}]

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string
    + asset_id: baconpancakes (required, string) - ID of the Asset in form of a string

### Create/Update an Asset [PUT]

This endpoint can be used to create a new Asset with an ID specified by the user, or to update a specific Asset via its ID.

Note that when updating an existing Asset, you always need to specify the last version you got of the Asset you are updating with `X-Contentful-Version`.

+ Request Create a new Asset with a predefined identifier
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json

    + Attributes (Asset Update)

+ Response 201 (application/vnd.contentful.management.v1+json)

    + Attributes (Asset)

+ Request Update existing Asset
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json
            X-Contentful-Version: 1

    + Attributes (Asset Update)

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Asset)

### Get a single Asset [GET]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Asset)

### Delete an Asset [DELETE]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            X-Contentful-Version: 1

+ Response 204 (application/vnd.contentful.management.v1+json)

## Asset Processing [/spaces/{space_id}/assets/{asset_id}/files/{locale}/process]

Asset processing happens asynchronously, the call will not block until it has finished.

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string
    + asset_id: baconpancakes (required, string) - ID of the Asset in form of a string
    + locale: `en-US` (required, string) - Locale for which files should be processed

### Process an Asset [PUT]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            X-Contentful-Version: 1

+ Response 204 (application/vnd.contentful.management.v1+json)

## Asset Publishing [/spaces/{space_id}/assets/{asset_id}/published]

After publishing the Asset it will be available via the Content Delivery API.

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string
    + asset_id: baconpancakes (required, string) - ID of the Asset in form of a string

### Publish an Asset [PUT]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            X-Contentful-Version: 13

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Asset Published)

### Unpublish an Asset [DELETE]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            X-Contentful-Version: 14

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Asset)

## Asset Archiving [/spaces/{space_id}/assets/{asset_id}/archived]

An Asset can only be archived when it's not published.

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string
    + asset_id: baconpancakes (required, string) - ID of the Asset in form of a string

### Archive an Asset [PUT]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            X-Contentful-Version: 15

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Asset)

### Unarchive an Asset [DELETE]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            X-Contentful-Version: 16

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Asset Update)

# Group Locales

Locales allow the definition of translated content for both Assets and Entries. A locale
consists mainly of a name and a locale code.

## Locale Collection [/spaces/{space_key}/locales]

+ Parameters
    + space_key: 5smsq22uwt4m (required, string) - ID of the Space in form of a string

### Get all Locales of a Space [GET]

The locale collection endpoint returns a list of all the created locales. One of those
will have the flag `default` set to true and is the locale that is used if no other
locale was specified for the request (e.g. when reading an entry).

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json

+ Response 200 (application/vnd.contentful.management.v1+json)
  + Attributes (Empty Array)

### Create a Locale [POST]

Posting a payload to the locale's collection endpoint creates a new locale
for the given space. Please note that you cannot create two locales with
the same locale code.

+ Request
  + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json
  + Attributes (Locale)
+ Response 201 (application/vnd.contentful.management.v1+json)
  + Attribute (Locale Complete)

## Locale [/spaces/{space_key}/locales/{locale_id}]

+ Parameters
  + space_key: 5smsq22uwt4m (required, string) - ID of the Space in form of a string
  + locale_id: 34N35DoyUQAtaKwWTgZs34 (required, string) - ID of the Locale in form of a string

### Get a Locale [GET]

This endpoint returns a single locale with all it's metadata.

+ Request
  + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json
+ Response 200 (application/vnd.contentful.management.v1+json)
  + Attribute (Locale Complete)

### Update a Locale [PUT]

Putting a payload against a single entities endpoint allows an update of a locale.

Please note that renaming a locale changes the responses for upcoming requests, which
might break your existing code.

Finally, it is not possible to change what is the default locale of a Space, as these are
permanent entities.

+ Request
  + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json
  + Attributes (Locale)
+ Response 201 (application/vnd.contentful.management.v1+json)
  + Attribute (Locale Complete)

### Deleting a Locale [DELETE]

This endpoint deletes an existing locale. Please note that it is **not** possible to recover
from this action! Every content that was stored for that specific locale gets deleted and
cannot be recreated by creating the same locale again.

+ Request
  + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json
+ Response 204

# Group Search Parameters

[See CDA documentation](http://docs.contentfulcda.apiary.io/#reference/search-parameters) for a list of search parameters supported for querying resources. Please note that the CMA does not support the `include` functionality.

# Group Webhooks

Webhooks in Contentful can notify you or someone else when content has changed. For example, when an Entry has been published Contentful sends the published Entry to a preconfigured HTTP endpoint. This can be used for notifications, static site generators or other forms of post-processing that is sourced from Contentful.

Webhooks are called when Assets, Entries or Content Types are published or unpublished. Therefore the Webhook's receiver will always get the latest version (or deletion thereof) available through the Delivery API.

You can create and manipulate Webhook Definitions using the Management API.

## Request Format

When content is published or unpublished all webhooks in a Space are fired.
Each webhook has a URL which will receive an HTTP `POST` request.
The HTTP request has the following headers & request body:

### Headers of Webhook HTTP Request

The `X-Contentful-Topic` header is one of the following values,
depending on which type of Resource has been published or unpublished:

- ContentManagement.ContentType.publish
- ContentManagement.ContentType.unpublish
- ContentManagement.Entry.publish
- ContentManagement.Entry.unpublish
- ContentManagement.Asset.publish
- ContentManagement.Asset.unpublish

For example, when an Entry has been published:

```
X-Contentful-Topic: ContentManagement.Entry.publish
```

Your webhook receiver should also take into account the `Content-Type` header, which will have the value `application/vnd.contentful.management.v1+json`. Many web frameworks (such as Express.js) and their middleware components only automatically parse a request body if the content-type header is `application/json`, and thus require additional configuration to parse request bodies with a different content-type header.

### Body of Webhook HTTP Request

The request body is the published Resource's body or deletion thereof.

The request body's content depends on the specific action:

- On activate/publish: The Resource's body. In case of Entries and Assets
their fields  will contain all locales, e.g. instead of `fields.name` there
will be `fields['en-US'].name`.
- On deactivate/unpublish: The Deletion of the Resource.

For Example, when an Entry has been published:

```json
{
  "sys": {
    "type": "Entry",
    "id": "cat",
    "space": {"sys": {"type": "Link", "linkType": "Space", "id": "example"}},
    "contentType": {"sys": {"type": "Link", "linkType": "ContentType", "id": "cat"}},
    "createdAt": "2013-03-26T00:13:37.123Z",
    "updatedAt": "2013-03-26T00:13:37.123Z",
    "revision": 1
  },
  "fields": {
    "name": {"en-US": "Nyan cat"},
    "color": {"en-US": "Rainbow"},
    "nyan": {"en-US": true},
    "birthday": {"en-US": "2011-04-02T00:00:00.000Z"},
    "diary": {"en-US": "Nyan cat has an epic rainbow trail."},
    "likes": {"en-US": ["rainbows", "fish"]},
    "bestFriend": {"en-US": {"type": "Link", "linkType": "Entry", "id": "happycat"}}
  }
}
```

Or a Deletion of an Entry when an Entry has been unpublished:

```
{
  "sys": {
    "type": "DeletedEntry",
    "id": "cat",
    "space": {"sys": {"type": "Link", "linkType": "Space", "id": "example"}},
    "createdAt": "2013-03-26T00:13:37.123Z",
    "updatedAt": "2013-03-26T00:13:37.123Z",
    "revision": 1
  }
}
```

### Response Detection

When a webhook is triggered an HTTP POST request is made to its pre-configured HTTP URL.
Depending on the HTTP response's status code the webhook will either succeed or fail:

- Success: The HTTP endpoint responded with an HTTP status code < 300
- Error: The HTTP endpoint responded with an HTTP status code >= 300

In case of an error, the webhook will periodically retry its request with
increasing delays in between up to a maximum of 3 attempts.

## Webhooks Collection [/spaces/{space_id}/webhook_definitions]

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string

### Get all Webhooks of a Space [GET]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Empty Array)

### Create a Webhook [POST]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json

    + Attributes
        - url: https://www.example.com/test - URL the Webhook will call

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Webhook Definition)

## Webhook [/spaces/{space_id}/webhook_definitions/{webhook_id}]

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string
    + webhook_id: foobar (required, string) - ID of the Webhook in form of a string

### Create/Update a Webhook [PUT]

+ Request Create with a predefined identifier
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json

    + Attributes
        - url: https://www.example.com - URL the Webhook will call

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Webhook Definition)

+ Request Update existing
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json
            X-Contentful-Version: 1

    + Attributes
        - url: https://www.example.com - URL the Webhook will call
        - httpBasicUsername: yolo - Username for HTTP Basic Authentication
        - httpBasicPassword: yolo - Password for HTTP Basic Authentication

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Webhook Definition)

### Get a single Webhook [GET]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Webhook Definition)

### Delete a Webhook [DELETE]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 204 (application/vnd.contentful.management.v1+json)

# Group Roles

 Creating custom roles allows the admin to restrict access of users to certain resources. Roles are following a whitelisting approach, which means that everything that a user is allowed to do, needs to be explicitly defined. A role contains a name, a description, permissions and
 policies.

 Permissions on the one hand are basic rules which define whether or not a user can access content types, settings and entries. It can be specified if a user can read and/or manage those.

 On the other hand there are policies which can be used to allow or deny access to resources in a very fine-grained fashion. With polices you can for example limit read access to only entries of a specific content type or write access to only certain parts of an entry (e.g. for a specific locale).

 The following list explains the supported constraints:


- `and` - The AndConstraint evaluates if all it's conditions are true. The value of the AndConstraint needs to be an array with an arbitrary amount of constraints.

  The AndConstraint is necessary and useful for a broad variety of use cases. An example for the constraint is the limitation to a specific content type:

  ```
  {"and": [
      { "equals": [{ "doc": "sys.type" }, "Entry"] },
      { "equals": [{ "doc": "sys.contentType.sys.id" }, "content-type-id"] }
  ]}
  ```

- `equals` - The EqualityConstraint can be used to compare an entity's field or meta data against a specific value.

  EqualityConstraints are one of the very basic constraints and are typically used to ensure the type of a document or to match entries of a content type. See the other use cases for examples.

- `not` - The NotConstraint inverts the result of it's value.

  A typical use case for the NotConstraint is the inversion of whitelists to blacklist. If for example a user should not be able to see entries of a specific content type, it can either be achieved by denying access to those content types or by allowing access to all but the entries of the content type:

  ```
  {"and": [
      { "equals": [{ "doc": "sys.type" }, "Entry"] },
      { "not": { "equals": [{ "doc": "sys.contentType.sys.id" }, "content-type-id"] } }
  ]}
  ```

- `or` - The OrConstaint evaluates if one if it's conditions returns true. The value of the OrConstraint needs to be an array with an arbitrary amount of constraints.

  OrConstraints can be used to enable an effect for various different resources. E.g. a user should only be allowed to read entries of a specific content type or all assets:

  ```
  {"or": [
      {"and": [
          { "equals": [{ "doc": "sys.type" }, "Entry"] },
          { "not": { "equals": [{ "doc": "sys.contentType.sys.id" }, "content-type-id"] } }
      ]},
      { "equals": [{ "doc": "sys.type" }, "Asset"] }
  ]}
  ```

## Roles Collection [/spaces/{space_id}/roles]

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string

### Get all Roles [GET]

This endpoint returns a paginated list of roles for a given space. Each role contains a name, a description, as well as permissions and policies, which describe what a user can and cannot do.

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Empty Array)

### Create a Role [POST]

This endpoint can be used to create a custom role. Please note that a role name must be unique within the space.

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json

    + Attributes (Role)

+ Response 201 (application/vnd.contentful.management.v1+json)

    + Attributes (Complete Role)

## Role [/spaces/{space_id}/roles/{role_id}]

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string
    + role_id: 34SHqvY4zjISqXNawkyTwq (required, string) - ID of the Role in a form of a string

### Get a single Role [GET]

This endpoint can be used to read an existing single role.

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

    + Attributes (Complete Role)

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Complete Role)

### Update a single Role [PUT]

This endpoint can be used to update an existing role. Please note that this endpoint cannot be used to create a new role with a specific id.

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json

    + Attributes (Role)

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Complete Role)

### Delete a single Role [DELETE]

This endpoint can be used to delete an existing role. The deletion of roles only possible if there is no user in the space which only has the soon-to-be-deleted role assigned.

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 204

# Group Space Memberships

## Space Memberships Collection [/spaces/{space_id}/space_memberships]

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string

### Get all Space Memberships [GET]

This endpoint returns a paginated list of all space memberships.

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Empty Array)

### Create a Space Membership [POST]

This endpoint allows the creation of a space membership (or in other words the invitation of a user to a space). A user can and must either be flagged as "admin" or assigned to certain roles.

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json

    + Attributes (Space Membership)

+ Response 201 (application/vnd.contentful.management.v1+json)

    + Attributes (Complete Space Membership)

## Space Membership [/spaces/{space_id}/space_memberships/{space_membership_id}]

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in a form of a string
    + space_membership_id: 1K642Fo7Y33CtCtTHxv84Q (required, string) - ID of the Space Membership in a form of a string

### Get a single Space Membership [GET]

The endpoint returns details about an existing Space Membership.

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Complete Space Membership)

### Update a single Space Membership [PUT]

The endpoints allows the modification of a Space Membership. This way additional roles can be assigned or a user can be flagged as an admin.

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json

    + Attributes (Space Membership)

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Complete Space Membership)

### Delete a single Space Membership [DELETE]

This endpoint allows the deletion of a Space Membership. It only affects the accessibility of space for user and not a user itself. Please note that it is possible to remove every administrator from a space. This means, there is no one left to manage the users. This can be fixed by inviting someone through the web application's organization settings.

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 204

# Group API Keys

## API Keys Collection [/spaces/{space_id}/api_keys]

+ Parameters
    + space_id: 5smsq22uwt4m (required, string) - ID of the Space in form of a string

### Get all API Keys [GET]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1

+ Response 200 (application/vnd.contentful.management.v1+json)

    + Attributes (Empty Array)


### Create an API Key [POST]

+ Request
    + Headers

            Authorization: Bearer b4c0n73n7fu1
            Content-Type: application/vnd.contentful.management.v1+json

    + Attributes
        - name: Example API Key - Name of the API Key

+ Response 201 (application/vnd.contentful.management.v1+json)

    + Attributes (API Key)


## Data Structures

### Asset

- Include Asset Update
- sys - System Attributes
    - id: baconpancakes - Identifier
    - type: Asset - Type of Resource
    - version: 1 (number) - Version of Resource
    - space (Space Link)
    - Include Resource Metadata

### Asset Published

- Include Asset
- Include Resource Published

### Asset Update

- fields - Field Values
    - title
        - `en-US`: Bacon Pancakes
    - file
        - `en-US`
            - contentType: image/jpeg
            - fileName: example.jpeg
            - upload: https://example.com/example.jpg

### Content Type

- sys
    - type: ContentType - Type of Resource
    - id: 3ORKIAOaJqQWWg86MWkyOs - Identifier
    - space (Space Link)
    - version: 1 (number) - Version of Resource
    - Include Resource Metadata

### Content Type Creation

- name: Blog Post - Name of the Content Type
- fields (array[object]) - Defined Fields
    - (object)
        - id: title - Identifier of the Field
        - name: Title - Display name of the Field
        - required: true
        - localized: true
        - type: Text - Type of the Field
    - (object)
        - id: body - Identifier of the Field
        - name: Body - Display name of the Field
        - required: true
        - localized: true
        - type: Text - Type of the Field

### Content Type Link
- sys
    - type: Link - Type of Resource
    - linkType: ContentType - Type of linked Resources
    - id: hfM9RCJIk0wIm06WkEOQY - Identifier of Resource

### Content Type Published

- Include Content Type Creation
- Include Content Type
- Include Resource Published

### Content Type Unpublished

- Include Content Type Creation
- Include Content Type
- sys - System Attributes
    - firstPublishedAt: `2015-05-15T13:38:11.311Z` - Date/Time of first publishing
    - publishedCounter: 2 (number) - Number of times the Resource has been published

### Content Type Update

- name: Blog Post - Name of the Content Type
- fields (array[object]) - Defined Fields
    - (object)
        - id: tlkn
- Include Content Type

### Content Type Update Field ID

- name: Blog Post - Name of the Content Type
- description: Simple blog post with headline and body fields. - Description of the Content Type
- fields (array[object]) - Defined Fields
    - (object)
        - id: title - Old identifier of the Field
        - newId: headline - New identifier of the Field
        - name: Headline - Display name of the Field
        - type: Text - Type of the Field
    - (object)
        - id: body - Identifier of the Field
        - name: Body - Display name of the Field
        - type: Text - Type of the Field

### Content Type Validations

- name: Blog Post - Name of the Content Type
- fields (array[object]) - Defined Fields
    - (object)
        - id: title - Identifier of the Field
        - name: Title - Display name of the Field
        - type: Text - Type of the Field
        - validations (array[object]) - Validations to be applied before publishing
            - (object)
                - size
                    min: 5
                - regexp
                    pattern: wow|very|such

### Empty Array

- sys - System Attributes
    - type: Array - Type of Resource
- total: 0 (number) - Total number of resources matching
- skip: 0 (number) - Number of resources skipped
- limit: 100 (number) - Maximum number of resources in this response
- items (array) - Resources contained in the array

### Entry

- Include Entry Update
- sys - System Attributes
    - id: helloworld - Identifier of Resource
    - type: Entry - Type of Resource
    - version: 1 (number) - Version of Resource
    - space (Space Link)
    - contentType (Content Type Link)
    - Include Resource Metadata

### Entry Published

- Include Entry
- Include Resource Published

### Entry Update

- fields - Localized field values
    - title
        - `en-US`: `Hello, World!`
    - body
        - `en-US`: Bacon is healthy!

### Locale

- name: `English (United States)` (string, required)
- code: `en-US` (string, required)

### Locale Complete

- Include Locale
- contentDeliveryApi: `true` (boolean)
- contentManagementApi: `true` (boolean)
- `default`: `false` (boolean)
- sys - System Attributes
  - type: `Locale` (string)
  - id: `34N35DoyUQAtaKwWTgZs34` (string)
  - version: 0 (number)
  - space (Space Link)
  - Include Resource Metadata

### Resource Metadata

- createdAt: `2015-05-18T11:29:46.809Z` - Creation date
- createdBy (User B)
- updatedAt: `2015-05-18T11:29:46.809Z` - Date/time of last update
- updatedBy (User B)

### Resource Published

- sys - System Attributes
    - firstPublishedAt: `2015-05-15T13:38:11.311Z` - Date/time of first publishing
    - publishedCounter: 2 (number) - Number of times published
    - publishedAt: `2015-05-15T13:38:11.311Z` - Date/time of current publishing
    - publishedBy (User B)
    - publishedVersion: 9 (number) - Version of the resource that has been published

### Space

- sys - System Attributes
    - type: Space - Type of Resource
    - id: cfexampleapi - Identifier of Resource
    - version: 3 (number) - Version of Resource
    - Include Resource Metadata
- name: Contentful Example API - Name of Resource
- defaultLocale : en-US - Default locale of the Space

### Space Link
- sys - System Attributes
    - type: Link - Type of Resource
    - linkType: Space - Type of linked resources
    - id: 5smsq22uwt4m - Identifier of Resource

### User A
- sys
    - type: Link
    - linkType: User
    - id: 7BslKh9TdKGOK41VmLDjFZ

### User B
- sys
    - type: Link
    - linkType: User
    - id: 4FLrUHftHW3v2BLi9fzfjU

### Webhook Definition

- sys
    - type: WebhookDefinition
    - id: foobar
    - version: 0 (number)
    - space (Space Link)
    - Include Resource Metadata
- url: https://www.example.com
- httpBasicUsername

### API Key

- sys - System Attributes
    - type: ApiKey
    - id: exampleapikey - Identifier of Resource
    - version: 0 (number) - Version of Resource
    - Include Resource Metadata
- name: Example API Key - Name of Resource

### Role

- name: Some role (string, required) - Name of Resource
- description: Test role (string) - Description of Resource
- permissions - Permissions for accessing application sections
    - ContentDelivery: all (string)
    - ContentModel (array[string])
        - read
    - Settings (array[string])
        - read
        - manage
- policies (array[Policy]) - Custom policies

### Complete Role

- sys - System Attributes
    - type: Role (string)
    - id: examplerole - Identifier of Resource
    - version: 0 (number) - Version of Resource
    - Include Resource Metadata
- Include Role

### Policy

- effect: allow (string) - Allow or deny an action
- action (array[string]) - Array of strings or "all" string shortcut
    - read
    - create
    - update
    - delete
    - publish
    - unpublish
    - archive
    - unarchive
- constraint
    - equals (array)
        - doc
            - doc: sys.type (string)
        - Entry (string)

### Space Membership

- email: test@contentful.com (string) - User's e-mail address
- admin: false (boolean) - Flag indicating if user is an administrator
- roles (array[RoleLink]) - Array of Role links

### Complete Space Membership

- sys - System Attributes
    - type: SpaceMembership (string)
    - id: examplerole - Identifier of Resource
    - version: 0 (number) - Version of Resource
    - Include Resource Metadata
- Include Space Membership

### RoleLink

- type: Link (string)
- linkType: Role (string)
- id: examplerole (string)

:[Data Structures](_partials/cma/data-structures.apib)
